<?php
/**
 * @file
 * Global administration functions and definitions.
 */

// Constants used for Google Search results.
define('WWE_MASTER_SEARCH_IMAGE_MIN_WIDTH', 696);
define('WWE_MASTER_SEARCH_LOGO_WIDTH', 600);
define('WWE_MASTER_SEARCH_LOGO_HEIGHT', 60);
define('WWE_MASTER_SEARCH_HEADLINE_LIMIT', 110);
define('WWE_ADA_NO_ALT_TEXT', 'ada-no-alt-text');


/**
 * Implements hook_menu().
 */
function wwe_master_menu() {
  $path = drupal_get_path('module', 'wwe_master');
  return array(
    'admin/config/wwe' => array(
      'title' => 'WWE Configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wwe_master_config'),
      'access arguments' => array('access WWE configuration'),
      'file' => 'wwe_master.admin.inc',
      'file path' => $path,
    ),
    'node/%node/quick-drag-drop-mode' => array(
      'title' => 'Quick drag & drop mode',
      'access callback' => '_wwe_master_quick_drag_drop_mode_access',
      'weight' => 110,
      'type' => MENU_LOCAL_TASK,
    ),
    'wwe-master/taxonomy/autocomplete' => array(
      'title' => 'Autocomplete taxonomy',
      'page callback' => 'wwe_master_taxonomy_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'wwe_master.admin.inc',
    ),
  );
}

/**
 * Determines whether the current user may use the Quick drag & drop mode.
 *
 * @return boolean
 *   TRUE if the user is allowed, FALSE otherwise.
 */
function _wwe_master_quick_drag_drop_mode_access() {
  return path_is_admin(current_path());
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function wwe_master_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (user_is_logged_in()) {
    if (!empty($data['tabs'][0])) {
      foreach ($data['tabs'][0]['output'] as $key => $output) {
        // Append the language code to the 'edit' link of the MENU_LOCAL_TASK to take
        // the user to the correct language of the node when attempting to edit it.
        if ($output['#link']['path'] == 'node/%/edit') {
          global $language_content;
          $data['tabs'][0]['output'][$key]['#link']['href'] .= '/' . $language_content->language;
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Update the changed timestamp for all the nodes using the file being updated
 * as thumbnail so Cloudsearch knows it has to update the info for the node
 * and can get the new thumbnail in case the image was replaced.
 *
 * @see https://jira.wwe.com/browse/WEB-817
 */
function wwe_master_entity_update($entity, $type) {
  if ($type == 'file') {
    $sql = 'SELECT entity_id FROM {field_data_field_thumbnail_image} WHERE field_thumbnail_image_target_id = :fid';
    $result = db_query($sql, array(':fid' => $entity->fid));
    $nids = $result->fetchCol();
    if (!empty($nids)) {
      wwe_master_touch_nodes($nids);
    }
  }
}

/**
 * Update node.changed timestamp for the nodes received.
 *
 * @param array $nids
 *   Array of nids to update.
 *
 * @return int Number of nodes updated.
 */
function wwe_master_touch_nodes($nids) {
  $num_updated = db_update('node')
    ->fields(array(
      'changed' => REQUEST_TIME,
    ))
    ->condition('nid', $nids, 'IN')
    ->execute();
  return $num_updated;
}

/**
 * Implements hook_theme().
 */
function wwe_master_theme() {
  $theme_path = drupal_get_path('module', 'wwe_master') . '/templates';
  return array(
    'wwe_thumb' => array(
      'variables' => array(
        'node' => NULL,
        'style_name' => NULL,
      ),
    ),
    'wwe_thumb_url' => array(
      'variables' => array(
        'entity' => NULL,
        'style_name' => NULL,
      ),
    ),
    'wwe_teaser_title' => array(
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'wwe_summary' => array(
      'variables' => array(
        'node' => NULL,
        'trim_length' => 255,
      ),
    ),
    'wwe_episode_primary_date_display' => array(
      'variables' => array(),
    ),
    'wwe_render_picture' => array(
      'variables' => array(
        'image_uri' => NULL,
        'attributes' => array(),
        'mapping' => NULL,
        'fallback' => NULL,
        'lazyload' => NULL,
        'video_duration' => NULL,
      ),
    ),
    'wwe_master_toolbox_fapi_multifield_dragandrop' => array(
      'render element' => 'element',
    ),
    'wwe_master_content_pane_template' => array(
      'template' => 'wwe-master-content-pane-template',
      'variables' => array(
        'path' => NULL,
        'language' => NULL,
        'conf_hash' => NULL,
      ),
      'path' => $theme_path,
      'type' => 'theme',
    ),
    'wwe_master_config' => array(
      'render element' => 'form',
      'file' => 'wwe_master.admin.inc',
    ),
  );
}

/**
 * Implements hook_variable_group_info().
 */
function wwe_master_variable_group_info() {
  $groups['wwe_logo'] = array(
    'title' => t('WWE Logo'),
    'description' => t('WWE Logo'),
    'access' => 'administer site configuration',
  );

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function wwe_master_variable_info($options) {
  $variables = array();

  $variables['wwe_svg_logo'] = array(
    'title' => t('SVG Logo Code'),
    'description' => t('Paste SVG logo code into text area below.'),
    'type' => 'text',
    'localize' => TRUE,
    'group' => 'wwe_logo',
  );

  return $variables;
}

/**
 * Returns the absolute url for a thumbnail image for a entity object.
 *
 * This function returns the uri for field_thumbnail_image
 * or field_primary_image or a default image.
 *
 * @param array $vars
 *   An associative array containing:
 *     - entity The entity object.
 *     - image_style The image style machine name.
 */
function theme_wwe_thumb_url($vars) {

  if (empty($vars['entity']) || empty($vars['style_name'])) {
    return '';
  }

  $uri = wwe_master_node_get_thumb_uri($vars['entity'], $vars['type']);

  $url = "";
  if ($uri != "") {
    $url = image_style_url($vars['style_name'], $uri);
  }

  return $url;
}

/**
 * Returns themed date with eastern and central timezones.
 *
 * @param array $vars
 *   An associative array containing:
 *     - timestamp The node object.
 */
function theme_wwe_episode_primary_date_display($vars) {
  global $language;
  $output = '';
  $utc_timestamp = $vars['timestamp'];
  $local_timezone = $vars['timezone'];

  if (empty($utc_timestamp)) {
    return '';
  }

  if (!empty($vars['use_short_month'])) {
    $main_format = 'episode_header_short_month';
  }
  else {
    $main_format = 'episode_header';
  }

  $base = format_date($utc_timestamp, $main_format, '', $local_timezone);

  // Use 'Military Time' format if the language code is 'de'.
  $format_date = ($language->language === 'de') ? 'H:i' : 'g:i';
  $localized_hour = format_date($utc_timestamp, 'custom', $format_date, $local_timezone);
  // Strip out ':00' in the hour, if exists and the language code isn't 'de'.
  $local_hour = ($language->language === 'de') ? $localized_hour : str_replace(':00', '', $localized_hour);
  // Add space to beginning of data so that it does not add extraneously in
  // theme output below.
  $am_pm = ($language->language === 'de') ? '' : format_date($utc_timestamp, 'custom', ' A', $local_timezone);

  // Determine how to display hour and timezone values.
  if ($local_timezone == 'America/New_York') {
    // If it is a special event.
    if ($vars['ppv'] == '1') {
      $local_timezone_abbr = t('ET');
      $alt_timezone = 'America/Los_Angeles';
      $timezone_abbr = t('PT');
    }
    else {
      $am_pm = '';
      $alt_timezone = 'America/Chicago';
      $local_timezone_abbr = '';
      $timezone_abbr = t('C');
    }

    $alt_timezone_am_pm = format_date($utc_timestamp, 'custom', 'A', $alt_timezone);
    // Strip out ':00' in the hour, if exists.
    $alt_hour = str_replace(':00', '', format_date($utc_timestamp, 'custom', 'g:i', $alt_timezone));

    $output = $base . ' | ' . $local_hour . $am_pm . '<sup>' . $local_timezone_abbr . '</sup>' . '/' . $alt_hour . ' ' . $alt_timezone_am_pm . '<sup>' . $timezone_abbr . '</sup>';
  }
  else {
    $output = $base . ' | ' . $local_hour . $am_pm;
  }

  return $output;
}

/**
 * Returns a themed thumbnail image from a node.
 *
 * @param array $vars
 *   An associative array containing:
 *     - node The node object.
 *     - style_name The image style machine name.
 */
function theme_wwe_thumb($vars) {

  if (empty($vars['node']) || $vars['path']) {
    return '';
  }

  $uri = wwe_master_node_get_thumb_uri($vars['node']);

  $vars['path'] = $uri;

  return theme('image_style', $vars);

}

/**
 * Returns either the body summary or the body, with optional trimming.
 *
 * @param array $vars
 *   An associative array containing:
 *     - node: The node object or node ID.
 *     - trim_length length to trim the summary/body to.
 */
function theme_wwe_summary($vars) {
  $wrapper = entity_metadata_wrapper('node', $vars['node']);
  global $language_content;
  $wrapper->language($language_content->language);
  $body = $wrapper->body->value();

  $summary = "";

  if (!empty($wrapper->body->raw()) && $wrapper->body->__isset('summary') && !empty($wrapper->body->summary->value())) {
    $summary = $wrapper->body->summary->value();
  }
  // Use filtered html safe value.
  elseif ($wrapper->body->__isset('value') && $body['format'] === 'filtered_html' && !empty($body['safe_value'])) {
    $summary = $wrapper->body->value->value();
  }
  // Use full html value.
  elseif ($wrapper->body->__isset('value') && $body['format'] === 'full_html' && !empty($body['value'])) {
    $summary = $body['value'];
  }

  if (!empty($vars['trim_length'])) {
    $truncated = truncate_utf8($summary, $vars['trim_length'], TRUE);
    $summary = strip_tags($truncated);
  }

  return $summary;

}

/**
 * Defines theme callback for rendering picture module.
 *
 * @param array $vars
 *   An associative array containing:
 *   - image_uri: Drupal URI to image file.
 *   - attributes: (optional) Array of attributes for drupal_attributes.
 *   - mapping: Picture module breakpoint definition machine_name.
 *   - fallback: Image style to default to when breakpoint is not matched.
 *   - lazyload: (optional) Flag to trigger lazy load functionality. Defaults
 *     to on (1).
 *   - video_duration: A video duration. If it is not a video it should be empty.
 */
function theme_wwe_render_picture($vars) {
  if (!module_exists('picture')) {
    watchdog(
      __FUNCTION__,
      'Picture module not enabled and picture cannot be rendered.',
      NULL,
      WATCHDOG_NOTICE
    );
    return '';
  }

  // If no image URI was supplied, a picture cannot be rendered.
  if (empty($vars['image_uri'])) {
    return '';
  }

  $picture_mapping = picture_mapping_load($vars['mapping']);
  // Fail with message to user to prevent a PHP fatal error.
  if (!$picture_mapping) {
    drupal_set_message(
      t('Picture mapping for %mapping not found. Image for %uri not rendered.',
        array(
          '%mapping' => $vars['mapping'],
          '%uri' => $vars['image_uri'],
        )
      ), 'error');
    return '';
  }

  $fallback = $vars['fallback'];
  $breakpoints = picture_get_mapping_breakpoints($picture_mapping, $fallback);
  // For ADA reasons, some nonmeaningful images would have an empty alt text.
  if ($vars['attributes']['alt'] == WWE_ADA_NO_ALT_TEXT) {
    $vars['attributes']['alt'] = '';
  }
  else {
    $alt = _wwe_master_get_image_alt_or_title($vars, 'alt', 'title');
  }
  $title = _wwe_master_get_image_alt_or_title($vars, 'title', 'alt');
  if (!empty($vars['video_duration'])) {
    $vars['attributes']['aria-label'] = $alt . '. ' . ct_video_get_ada_duration($vars['video_duration']);
  }
  $attributes = !empty($vars['attributes']) ? $vars['attributes'] : array();
  $lazyload = isset($vars['lazyload']) ? $vars['lazyload'] : 1;

  return theme('picture', array(
    'uri' => $vars['image_uri'],
    'style_name' => $fallback,
    'breakpoints' => $breakpoints,
    'alt' => $alt,
    'title' => $title,
    'attributes' => $attributes,
    'lazyload' => $lazyload,
  ));
}

/**
 * Return the thumbnail uri for an entity object.
 *
 * Selects from either field_thumbnail_image or field_primary_image.
 * If neither are available, return a default image.
 *
 * @param object $entity
 *   Entity object.
 * @param string $type
 *   Entity type, defaults to 'node'.
 *
 * @return string
 *   The internal drupal path to the image
 */
function wwe_master_node_get_thumb_uri($entity, $type = 'node') {
  global $language_content;
  $thumbnail_image_uri = '';
  $primary_image_uri = '';

  // Per theme_wwe_thumb_url(), this is _always_ called with the second
  // parameter, so it must check here instead.
  if ($type == '') {
    $type = 'node';
  }

  try {
    $wrapper = entity_metadata_wrapper($type, $entity);
    $wrapper->language($language_content->language);

    if ($wrapper->__isset('field_thumbnail_image') && !empty($wrapper->field_thumbnail_image->value())) {
      $thumbnail_image_uri = $wrapper->field_thumbnail_image->uri->value();
    }

    if ($wrapper->__isset('field_primary_image') && !empty($wrapper->field_primary_image->value())) {
      $primary_image_uri = $wrapper->field_primary_image->uri->value();
    }
  }
  catch (EntityMetadataWrapperException $exc) {
    $replacements = array(
      '@function' => __FUNCTION__,
      '@string' => $exc->getTraceAsString(),
    );
    watchdog(
      'wwe_master',
      'See @function() <pre>@string</pre>',
      $replacements,
      WATCHDOG_ERROR
    );
  }

  $uri = "";
  // @todo: Add default uri for thumbs.
  if (!empty($thumbnail_image_uri)) {
    $uri = $thumbnail_image_uri;
  }

  if (empty($thumbnail_image_uri) && !empty($primary_image_uri)) {
    $uri = $primary_image_uri;
  }

  return $uri;
}

/**
 * Returns the teaser title.
 *
 * This function returns field_teaser_title, title_field, or the entity label.
 *
 * @param array $vars
 *   An associative array containing:
 *     - object $node The node object.
 *     - string $lang Language.
 */
function theme_wwe_teaser_title($vars) {
  global $language_content;

  $emw = entity_metadata_wrapper('node', $vars['node']);
  $lang = !empty($vars['language']) ? $vars['language'] : $language_content->language;
  $emw->language($lang);

  if ($emw->__isset('field_teaser_title') && $emw->field_teaser_title->value() != "") {
    $output = $emw->field_teaser_title->value();
  }
  elseif ($emw->__isset('title_field') && $emw->title_field->value() != "") {
    $output = $emw->title_field->value();
  }
  else {
    $output = $emw->label();
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function wwe_master_permission() {
  return array(
    'access WWE configuration' => array(
      'title' => t('Administer WWE configuration'),
      'description' => t('Manage settings relating to custom extensions.'),
      'restrict access' => TRUE,
    ),
    'clone wwe content' => array(
      'title' => t('Clone WWE content'),
      'description' => t('Clone WWE content on the current language.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function wwe_master_form_node_form_alter(&$form, &$form_state, $form_id) {
  // WEB-1710: Move the 'Suggest for Homepage' field to the 'Publishing options'
  // tab. As this tab is not a field group, we cannot move it so we hide it and
  // add a custom field which will then populate the original field.
  global $language_content;
  $lang = $language_content->language;

  // Only 'move' the field if we are on the English site.
  if ($lang == 'en' && isset($form['field_suggest_for_homepage'])) {
    $form['field_suggest_for_homepage']['#access'] = FALSE;
    $form['options']['fieldset_suggest_for_homepage'] = array(
      '#type' => 'fieldset',
      '#title' => t('Homepage'),
    );
    $form['options']['fieldset_suggest_for_homepage']['suggest_for_homepage'] = array(
      '#type' => 'checkbox',
      '#title' => 'Suggest for Homepage',
      '#default_value' => $form['field_suggest_for_homepage']['en']['#default_value'],
      '#states' => array(
        'disabled' => array(
          array(':input[name="field_promoted_to_homepage[und]"]' => array('checked' => TRUE)),
          array(':input[name="field_promoted_to_homepage[en]"]' => array('checked' => TRUE)),
        ),
      ),
    );
    $form['#validate'][] = 'node_suggest_for_homepage_validate';
  }

  // WEB-1561: Disable 'Save' and 'Save and continue' buttons while the content
  // is being created.
  wwe_master_disable_submit_buttons_attach_js($form);
  $form['#after_build'][] = 'wwe_master_disable_submit_buttons_after_build';

}

/**
 * After build form callback.
 */
function wwe_master_disable_submit_buttons_after_build($form, &$form_state) {
  // WEB-1561: Ensure to include the JS file if the form does not pass the
  // validation.
  wwe_master_disable_submit_buttons_attach_js($form);

  return $form;
}

/**
 * Adds the JS file to disable save buttons in node forms.
 *
 * @param array $form
 *  Drupal Form API array.
 */
function wwe_master_disable_submit_buttons_attach_js(&$form) {
  // Add JavaScript.
  $form['#attached']['js'][drupal_get_path('module', 'wwe_master') . '/js/wwe_master_disable_submit_buttons.js'] = array(
    'type' => 'file',
    'weight' => 10,
  );
}

/**
 * Validate callback that sets the Suggest for Homepage field.
 */
function node_suggest_for_homepage_validate($form, &$form_state) {
  $value = $form_state['values']['suggest_for_homepage'];
  if (!empty($form_state['values']['field_suggest_for_homepage'][LANGUAGE_NONE])) {
    $form_state['values']['field_suggest_for_homepage'][LANGUAGE_NONE][0]['value'] = $value;
  }
  elseif (!empty($form_state['values']['field_suggest_for_homepage']['en'])) {
    $form_state['values']['field_suggest_for_homepage']['en'][0]['value'] = $value;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wwe_master_form_locale_languages_edit_form_alter(&$form, &$form_state, $form_id) {
  $message = t('PSA: The Language domain setting below is managed via global.settings.php and local.settings.php.');
  drupal_set_message(check_plain($message));
}

/**
 * Implements hook_views_data_alter().
 */
function wwe_master_views_data_alter(&$data) {
  $data['node']['language']['field']['handler'] = 'wwe_views_handler_field_node_language';
  $data['file_managed']['uri']['field']['handler'] = 'wwe_views_handler_field_file_uri';
  $data['views_entity_node']['edit_node']['field']['handler'] = 'wwe_views_handler_field_node_link_edit';
  $data['views_entity_node']['delete_node']['field']['handler'] = 'wwe_views_handler_field_node_link_delete';
}

/**
 * Implements hook_form_alter().
 */
function wwe_master_form_alter(&$form, &$form_state, $form_id) {

  global $language_content;
  global $user;

  if ($form_id == 'event_node_form' ) {
    if (isset($form['field_televised'])){
      $form['field_televised']['#access'] = false;
    }

    if (isset($form['field_ringsider'])){
      $form['field_ringsider']['#access'] = false;
    }
  }

  if ($form_id == 'taxonomy_form_vocabulary' && !empty($form['actions']['delete'])) {
    unset($form['actions']['delete']);
  }

  /*if (!empty($form['type']['#value']) && $form_id == $form['type']['#value'] . '_node_form') {
    $form['#validate'][] = 'wwe_master_node_form_validate';
  }*/
  // When user does not have access to edit all languages disable fields. This
  // ensures users have access to edit the translation of node and only their
  // translation or access to edit all translations.
  if (!empty($form['nid']['#value']) && !user_access('edit translations of all languages') && $form['language']['#default_value'] != LANGUAGE_NONE) {
    if ($form['language']['#default_value'] !== $user->language) {

      // If a node with an original language other than the user's language is unpublished
      // and the user is an INTL user, hide the Homepage tab (WWEC-4450).
      if (empty($form['#node']->status)) {
        field_group_hide_field_groups($form, array('group_homepage'));
      }

      foreach ($form as $field => $value) {
        if (is_array($value) && isset($form[$field]['#language']) && $form[$field]['#language'] == 'und' && $field !== 'field_photo_reference' && $field !== 'field_poll_options') {
          $form[$field]['#disabled'] = TRUE;
        }
      }
      // Additionally disable global Publishing Options.
      $form['options']['#access'] = FALSE;
    }
  }

  if ($language_content->language !== 'en' && in_array('add', arg())) {
    if (!empty($form['field_fb_comments'])) {
      $form['#after_build'][] = '_wwe_master_disable_fb_comments';
    }
  }

  // Remove "Promoted to Homepage" and "Sticky at the top of Lists"
  // from node forms.
  if (!empty($form['type']['#value']) && $form_id == $form['type']['#value'] . '_node_form') {
    $form['options']['sticky']['#access'] = FALSE;
    $form['options']['promote']['#access'] = FALSE;

    if (!empty($form['body'])) {
      // Force the summary field to show on body.
      $lang = $form['#entity']->language;
      if (!empty($form['body'][$lang][0]['summary'])) {
        $form['body'][$lang][0]['summary']['#attributes']['class'] = array(
          'text-summary-no-links',
        );
      }
    }
  }

  // WEB-1153: Add button to create a new node clone, only if the node is
  // allowed to be cloned (this is, if it has the children and parent fields).
  if (isset($form['field_clone_children']) && isset($form['field_clone_parent'])) {
    // Hide buttons to edit content / operations.
    $form['field_clone_children'][LANGUAGE_NONE]['add_more']['actions']['add_more_ajax']['#access'] = FALSE;
    $form['field_clone_children'][LANGUAGE_NONE]['add_more']['actions']['existing_bulk_operations']['#access'] = FALSE;
    $form['field_clone_parent'][LANGUAGE_NONE]['add_more']['actions']['add_more_ajax']['#access'] = FALSE;
    $form['field_clone_parent'][LANGUAGE_NONE]['add_more']['actions']['existing_bulk_operations']['#access'] = FALSE;

    // Add clone button.
    if (!empty($form['nid']['#value'])) {
      $form['field_clone_parent']['button_create_node_clone'] = array(
        '#type' => 'submit',
        '#value' => t('Create new clone node'),
        '#submit' => array('wwe_master_create_node_clone'),
        '#access' => user_access('clone wwe content'),
        '#disabled' => FALSE,
      );
    }
  }
}

/**
 * Callback that creates a new node (new nid), exactly like the one where the
 * submit was triggered.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wwe_master_create_node_clone($form, $form_state) {
  global $user;
  $langcode = wwe_media_browser_get_translation();

  $node = $form['#node'];
  $alias = drupal_lookup_path('alias', "node/" . $node->nid, $node->translations->original);
  $languages = array_keys($node->translations->data);
  $uid = !empty($node->translations->data[$langcode]['uid']) ? $node->translations->data[$langcode]['uid'] : $user->uid;

  unset($node->vid);
  unset($node->nid);
  unset($node->title_field);

  $node->status = NODE_NOT_PUBLISHED;
  $node->path['pathauto'] = 0;
  node_save($node);

  // Reload the node (avoid to unset the path of the original node).
  $clone = node_load($node->nid);

  // Adding translation if doesn't exists.
  if (!in_array($langcode, $languages)) {
    $translation = array(
      'translate' => 0,
      'status' => 1,
      'language' => $langcode,
      'source' => $clone->translations->original,
    );

    $translation_values = NULL;
    $node_translation = $clone;
    foreach (field_info_instances('node', $clone->type) as $instance) {
      $field_name = $instance['field_name'];
      $field = field_info_field($field_name);
      if ($field['translatable'] && isset($node_translation->$field_name)) {
        foreach ($node_translation->$field_name as $lang_key => $field) {
          if ($lang_key == $clone->translations->original || $lang_key == $langcode) {
            $translation_values[$field_name][$langcode] = $field;
          }
        }
      }
    }
    $handler = entity_translation_get_handler('node', $clone);
    $handler->setTranslation($translation, $translation_values);
    field_attach_presave('node', $clone);
    field_attach_update('node', $clone);
    $languages[] = $langcode;
  }

  // Update 'alias' and 'language'.
  $state = ct_episode_get_state($clone->nid);
  $clone->path['alias'] = $alias . '-' . $state;
  $clone->language = $langcode;
  node_save($clone);

  // Remove additional translations.
  $handler = entity_translation_get_handler('node', $clone);
  $translations = array_diff($languages, array($langcode));
  foreach($translations as $lang) {
    $handler->removeTranslation($lang);
  }
  field_attach_presave('node', $clone);
  field_attach_update('node', $clone);

  // Set uid, node language and parent element.
  $clone->uid = $uid;
  $clone_emw = entity_metadata_wrapper('node', $clone);
  $clone_emw->field_clone_parent = array($form['nid']['#value']);
  $clone_emw->save();
}

/**
 * Implements hook_entity_load().
 */
function wwe_master_entity_load($entities, $type) {
  if ($type == 'node') {
    foreach ($entities as $key => $entity) {
      if ($entity->type == 'gallery') {
        // Add publication_status property to field_photo_reference, to filter
        // out from display unpublished files.
        if (!empty($entities[$key]->field_photo_reference[LANGUAGE_NONE])) {
          foreach ($entities[$key]->field_photo_reference[LANGUAGE_NONE] as $delta => $value) {
            if (wwe_master_entity_is_published($value['target_id'])) {
              $entities[$key]->field_photo_reference[LANGUAGE_NONE][$delta]['published'] = 1;
            }
            else {
              $entities[$key]->field_photo_reference[LANGUAGE_NONE][$delta]['published'] = 0;
            }
          }
        }
      }
    }
  }
}

/**
 * Tests if entity is published, based on new published property.
 *
 * @param int $fid
 *   File id.
 *
 *   See file_admin module.
 *
 * @return int
 *   The value of the entity's "published" property.
 */
function wwe_master_entity_is_published($fid) {
  return (int) db_query("SELECT published FROM {file_managed} WHERE fid = :fid", array(':fid' => $fid))->fetchField();
}

/**
 * Implements hook_token_info().
 */
function wwe_master_token_info() {
  $info['tokens']['node']['teaser_title_or_title'] = array(
    'name' => t('node teaser_title or title'),
    'description' => t('Returns the teaser_title (if available) or the field_title'),
  );

  $info['tokens']['node']['wwe_master_custom_parent_reference'] = array(
    'name' => t('WWE custom parent reference'),
    'description' => t('Returns parent reference url in target translation or if unavailable, a series of fallbacks.'),
  );
  $info['tokens']['current-page']['wwe_master_url_with_base_url'] = array(
    'name' => t('Url with base_url'),
    'description' => t('The full url of the page with the base_url included.'),
  );
  $info['tokens']['current-page']['wwe_master_front_base_url'] = array(
    'name' => t('Front page base_url'),
    'description' => t('The full url of the page with the base_url included.'),
  );
  $info['tokens']['file']['wwe_master_photo_image_type'] = array(
    'name' => t('Photo image type'),
    'description' => t('Place where the photo will be used.'),
  );

  $image_styles = image_styles();

  foreach ($image_styles as $style_name => $style) {
    $info['tokens']['node']['thumbnail_image_url_or_primary_image_url:' . $style_name] = array(
      'name' => t('Thumbnail Image or Primary Image url with @style_name style', array('@style_name' => $style_name)),
      'description' => t('Returns the thumbnail_image url (if available) or the primary_image url, using @style_name image style.', array('@style_name' => $style_name)),
    );
    $info['tokens']['term']['thumbnail_image_url_or_primary_image_url:' . $style_name] = array(
      'name' => t('Thumbnail Image or Primary Image url with @style_name style', array('@style_name' => $style_name)),
      'description' => t('Returns the thumbnail_image url (if available) or the primary_image url, using @style_name image style.', array('@style_name' => $style_name)),
    );
    $info['tokens']['node']['thumbnail_image_url_or_primary_image_url:' . $style_name . ':absolute'] = array(
      'name' => t('Thumbnail Image or Primary Image url with @style_name style', array('@style_name' => $style_name)),
      'description' => t('Returns the thumbnail_image url (if available) or the primary_image url, using @style_name image style.', array('@style_name' => $style_name)),
    );
  }

  return $info;
}

/**
 * Implements hook_tokens().
 */
function wwe_master_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $base_url;
  $replacements = array();
  if ($type == 'current-page') {
    foreach ($tokens as $name => $original) {
      if ($original == '[current-page:wwe_master_url_with_base_url]') {
         $replacements[$original] = $base_url . "/" . drupal_get_path_alias(current_path());
      }
      if ($original == '[current-page:wwe_master_front_base_url]') {
        $replacements[$original] = $base_url;
      }
    }
  }
  if ($type == 'node' || $type == 'term') {
    $entity_type = (!empty($options['entity_type'])) ? $options['entity_type'] : '';
    foreach ($tokens as $name => $original) {
      // Using if instead of a switch statement here because we're
      // allowing an image style machine name after a colon
      // (e.g. thumbnail_image_url_or_primary_image_url:my_image_style)
      // we then use explode to get the two variables, the token name
      // and the image style name.
      if (strpos($name, 'thumbnail_image_url_or_primary_image_url') === 0) {
        $parts = explode(':', $name, 3);

        $name = $parts[0];
        $style_name = $parts[1];
        $vars = array(
          'entity' => $data[$type],
          'style_name' => $style_name,
          'absolute' => TRUE,
          'type' => $entity_type,
        );
        // Add http to override protocol agnostic URLs for sharing.
        $url = theme('wwe_thumb_url', $vars);
        // When no base URL or protocol relative request add the base_url in.
        if (!empty($url) && $parts[2] === 'absolute') {
          $replacements[$original] = $url . '.absolute';
        }
        elseif (!empty($url)) {
          $replacements[$original] = $url;
        }
        else {
          $replacements[$original] = '';
        }
      }
      else {
        switch ($name) {
          case 'teaser_title_or_title':
            $replacements[$original] = theme('wwe_teaser_title', array('node' => $data['node']));
            break;

          case 'wwe_master_custom_parent_reference':
            $replacements[$original] = wwe_master_custom_parent_reference_token($data['node']);
            break;
        }
      }
    }
  }
  if ($type == 'file' && !empty($data['file'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'wwe_master_photo_image_type':
          $term = taxonomy_term_load($data['file']->field_image_type[LANGUAGE_NONE][0]['tid']);
          $replacements[$original] = strtolower(str_replace(' ', '-', $term->name));
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Utility function for building token string.
 *
 * @param object $node
 *   Node object.
 *
 * @return string
 *   Token string.
 */
function wwe_master_custom_parent_reference_token($node) {

  if (!empty($node->entity_translation_handler_id)) {
    $et_handler = entity_translation_get_handler('node', $node);
    $lang = $et_handler->getFormLanguage();
  }
  else {
    $lang = $node->language;
  }

  $emw = entity_metadata_wrapper('node', $node);
  $emw->language($lang);

  if ($emw->__isset('field_parent_references') && !empty($emw->field_parent_references->value())) {

    $data = $emw->field_parent_references->raw();

    if (is_array($data)) {
      $parent_nid = array_shift($data);
    }
    else {
      $parent_nid = $data;
    }

    $target_language_alias = drupal_get_path_alias('node/' . $parent_nid, $lang);

    if ($target_language_alias != 'node/' . $parent_nid) {
      return $target_language_alias;
    }

    // If target translation alias isn't available, try for the english one.
    $english_alias = drupal_get_path_alias('node/' . $parent_nid, 'en');
    if ($english_alias != 'node/' . $parent_nid) {
      return $english_alias;
    }

    // If target translation and english translation aliases aren't available,
    // try for LANGUAGE_NONE translation alias.
    $language_none_alias = drupal_get_path_alias('node/' . $parent_nid, LANGUAGE_NONE);
    if ($language_none_alias != 'node/' . $parent_nid) {
      return $language_none_alias;
    }

  }
  return NULL;
}

/**
 * Implements hook_entity_presave().
 */
function wwe_master_entity_presave($entity, $type) {
  // Set field_teaser_title to value of title when empty.
  try {
    $emw = entity_metadata_wrapper($type, $entity);
    if ($emw->__isset('language') && isset($entity->language)) {
      $emw->language = $entity->language;
    }

    // Set teaser title to title field as a  default when empty.
    if ($emw->__isset('field_teaser_title') && empty($emw->field_teaser_title->raw())) {
      $emw->field_teaser_title = $emw->label();
    }

    if ($emw->__isset('field_short_headline') && empty($emw->field_short_headline->raw())) {
      $emw->field_short_headline = $emw->field_teaser_title->value();
    }

    if ($emw->__isset('field_homescreen_app_title') && empty($emw->field_homescreen_app_title->raw())) {
      $emw->field_homescreen_app_title = $emw->field_short_headline->value();
    }

    // Set thumbnail image to primary image as a default.
    if (
      $emw->__isset('field_primary_image') &&
      $emw->__isset('field_thumbnail_image') &&
      $emw->__isset('type') &&
      !empty($emw->field_primary_image->raw()) &&
      empty($emw->field_thumbnail_image->raw()) &&
      $emw->type->value() !== 'social'
    ) {
      $emw->field_thumbnail_image->set($emw->field_primary_image->raw());
    }
  }
  catch (EntityMetadataWrapperException $e) {
    watchdog(__FUNCTION__, 'Message: !m. Trace: !t', array(
      '!m' => $e->getMessage(),
      '!t' => $e->getTraceAsString(),
    ));
  }

  if ($type == 'node') {
    // Set node created property based on node becoming published.
    if (
      isset($entity->original) &&
      $entity->original->status == 0 &&
      $entity->status == 1
    ) {
      $entity->created = time();
    }

    wwe_master_entity_autoparent($entity);

    // Auto-generate field_simplename from title, if blank.
    $langcode = $entity->language;
    if (empty($entity->field_simplename[$langcode][0]['value'])) {

      if (!empty($entity->title_field[$langcode][0]['value'])) {
        $title = $entity->title_field[$langcode][0]['value'];
      }
      else {
        $title = $entity->title;
      }
      module_load_include('inc', 'pathauto');
      $clean_title = pathauto_cleanstring($title);
      $entity->field_simplename[$langcode][0]['value'] = $clean_title;
    }
  }
}

/**
 * Automatically add parents to node.
 *
 * @param object $entity
 *   Entity object.
 */
function wwe_master_entity_autoparent(&$entity) {
  $lang = LANGUAGE_NONE;
  if (!empty($entity->field_parent_references[$lang]) || !in_array($entity->type, array('article', 'match', 'gallery'))) {
    return;
  }

  if (!empty($entity->field_episode_reference[$lang])) {
    $entity->field_parent_references[$lang] = $entity->field_episode_reference[$lang];
  }
  elseif (!empty($entity->field_show_reference[$lang])) {
    $entity->field_parent_references[$lang] = $entity->field_show_reference[$lang];
  }
}

/**
 * Implements hook_field_attach_validate().
 *
 * Validate that the node doesn't parent reference to itself (WEB-23).
 */
function wwe_master_field_attach_validate($entity_type, $entity, &$errors) {
  if ($entity_type == 'node' && !empty($entity->field_parent_references)) {
    $emw = entity_metadata_wrapper($entity_type, $entity);
    foreach ($emw->field_parent_references->raw() as $d => $nid) {
      if (!empty($nid) && $entity->nid == $nid) {
        // Parent references field is untranslatable.
        $errors['field_parent_references'][LANGUAGE_NONE][$d][] = array(
          'error' => 'wwe_master_invalid_parent_reference',
          'message' => t('You cannot reference this same node in parent references.'),
          'error_element' => array(
            'target_id' => TRUE,
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Limit add and edit links for international editors.
 */
function wwe_master_preprocess_entity_translation_overview(&$vars) {
  global $user;

  if (!user_access('see add and edit translate links for all languages')) {
    $language_list = array_keys(language_list());
    foreach ($vars['rows'] as $index => $lang) {
      // Find /edit/add/<original language>/<target language> pattern.
      if (preg_match('/edit\/add\/([a-z]+)\/([a-z]+)/', $lang['data'][4], $matches)) {
        $target_language = $matches[2];
        // If not user's language.
        if ($target_language != $user->language && in_array($target_language, $language_list)) {
          // Remove link.
          $vars['rows'][$index]['data'][4] = '';
        }
      }
      // Find /edit/<target language> pattern.
      if (preg_match('/edit\/([a-z]+)/', $lang['data'][4], $matches)) {
        $target_language = $matches[1];
        // If not user's language.
        if ($target_language != $user->language && in_array($target_language, $language_list)) {
          // Remove link.
          $vars['rows'][$index]['data'][4] = '';
        }
      }
    }
  }
}

/**
 * Helper to call Class render methods.
 *
 * @param array $subtype
 *   Name being rendered.
 * @param array $conf
 *   Configuration options.
 * @param array $args
 *   Arguments provided.
 * @param array $context
 *   Available contexts.
 */
function wwe_master_content_pane_call_render($subtype, $conf, $args, $context) {
  // Because ctools uses ctools_plugin_get_function to call the function
  // in 'render callback', which runs the function name through
  // php function_exists(), class methods are not supported.
  // By running render callback through this wrapper, methods
  // can be envoked via call_user_func_array().
  $arguments = array(
    $subtype,
    $conf,
    $args,
    $context,
  );
  if (!isset($conf['extendedClass'])) {
    watchdog(__FUNCTION__, 'Extended Class not defined for ' . $subtype);
    return '';
  }
  return call_user_func_array(array($conf['extendedClass'], 'renderPane'), $arguments);
}

/**
 * Pane content admin info callback.
 *
 * Provides administrative info (the preview in panels when building a panel).
 */
function wwe_master_content_pane_admin_info($subtype, $conf, $context = NULL) {
  $arguments = array(
    $subtype,
    $conf,
    $context,
  );
  if (!empty($conf['extendedClass'])) {
    return call_user_func_array(array($conf['extendedClass'], 'adminInfo'), $arguments);
  }
  else {
    watchdog(__FUNCTION__, 'Pane ' . $subtype . ' has no extendedClass configured.');
  }
}

/**
 * Stores form data in conf class methods.
 *
 * @param array $form
 *   Drupal FAPI array.
 * @param array $form_state
 *   Drupal FAPI state array.
 */
function wwe_master_content_pane_form_pane_submit($form, &$form_state) {
  $args = array_merge(array($form, &$form_state), $form_state['build_info']['args']);
  return call_user_func_array(array($form_state['conf']['extendedClass'], 'editFormSubmit'), $args);
}

/**
 * Validates content pane form fields.
 *
 * @param array $form
 *   Drupal FAPI array.
 * @param array $form_state
 *   Drupal FAPI state array.
 */
function wwe_master_content_pane_form_pane_validate($form, &$form_state) {
  $args = array_merge(array($form, &$form_state), $form_state['build_info']['args']);
  return call_user_func_array(array($form_state['conf']['extendedClass'], 'editFormValidate'), $args);
}

/**
 * Helper to call Class edit form methods.
 *
 * @param array $form
 *   Drupal FAPI array.
 * @param array $form_state
 *   Drupal FAPI state array.
 */
function wwe_master_content_pane_edit_form($form, &$form_state) {
  $args = array_merge(array($form, &$form_state), $form_state['build_info']['args']);
  return call_user_func_array(array($form_state['conf']['extendedClass'], 'editForm'), $args);
}

/**
 * Form validate function for WWEContentPane edit forms.
 *
 * @param array $form
 *   Drupal FAPI array.
 * @param array $form_state
 *   Drupal FAPI state array.
 *
 * @see wwe_master_content_pane_edit_form()
 */
function wwe_master_content_pane_edit_form_validate($form, &$form_state) {
  global $language_content;
  $lang = $language_content->language;
  $values = $form_state['values'];

  foreach ($form as $key => $field) {
    if (is_array($field) && isset($field['#type'])) {
      if (_wwe_master_content_field_is_required_mediabrowser($field)) {
        if (empty($values[$key][$lang]) && empty($values[$key][LANGUAGE_NONE])) {
          form_set_error($key, t('Media selection is required.'));
        }
      }
    }
  }
}

/**
 * Helper function.
 *
 * Checks the field type and required flag of the passed field for a required
 * media browser field.
 *
 * @param array $field
 *   The FAPI field array to check type and required for.
 *
 * @return bool
 *   True if the field is a required wwe_media_browser_entityreference_browser.
 */
function _wwe_master_content_field_is_required_mediabrowser($field) {
  $type = 'wwe_media_browser_entityreference_browser';
  return ($field['#type'] == $type && $field['#required']);
}

/**
 * Helper function.
 *
 * Disables FB comments after the form is built on translations.
 */
function _wwe_master_disable_fb_comments($form, &$form_state) {
  if (!empty($form['field_fb_comments']['#language'])) {
    $lang = $form['field_fb_comments']['#language'];
    $form['field_fb_comments'][$lang]['#default_value'] = 0;
    $form['field_fb_comments'][$lang]['#checked'] = FALSE;
  }

  return $form;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Add file uri as a property for use with entity metadata wrapper.
 */
function wwe_master_entity_property_info_alter(&$info) {
  $info['file']['properties']['uri'] = array(
    'label' => t("URI"),
    'description' => t("The URI of the file."),
    'getter callback' => 'wwe_master_entity_get_file_properties',
    'schema field' => 'uri',
  );
}

/**
 * Callback to add uri as file entity property for entity metadata wrapper.
 *
 * @param string $file
 *   File name.
 * @param array $options
 *   Options array.
 * @param string $name
 *   Name of url.
 *
 * @return string
 *   Returns file uri.
 *
 * @see wwe_master_entity_property_info_alter
 */
function wwe_master_entity_get_file_properties($file, array $options, $name) {
  switch ($name) {
    case 'uri':
      // WWE-750: Unpublished files should not be shown to the public.
      // Sets here as EMW does not respect the access controls via file_admin.
      if ($file->published == FILE_NOT_PUBLISHED && !user_access('bypass file access')) {
        return NULL;
      }
      else {
        return $file->uri;
      }
  }
}

/**
 * Implements hook_flag_default_flags().
 */
function wwe_master_flag_default_flags() {
  $flags = array();

  $flags['pin_to_contextual_module'] = array(
    'entity_type' => 'node',
    'title' => 'Pin to Contextual Module',
    'global' => 1,
    'types' => array(
      0 => 'article',
      1 => 'match',
    ),
    'flag_short' => 'Pin this item to Contextual Module',
    'flag_long' => '',
    'flag_message' => 'This item is pinned to the contextual module.',
    'unflag_short' => 'Unpin from Contextual Module',
    'unflag_long' => '',
    'unflag_message' => 'You have unpinned this item from the contextual module.',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'weight' => 0,
    'show_in_links' => array(
      'full' => 0,
      'teaser' => 0,
      'rss' => 0,
      'search_index' => 0,
      'search_result' => 0,
      'token' => 0,
    ),
    'show_as_field' => 0,
    'show_on_form' => 1,
    'access_author' => '',
    'show_contextual_link' => 0,
    'i18n' => 0,
    'api_version' => 3,
  );

  return $flags;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Limits content returns from base WWE ContentPane class to entities with a
 * translation in the currently viewed language.
 *
 * @Todo: Resolve wwe_language tag alter in regards to image entities.
 */
function wwe_master_query_wwe_language_alter(QueryAlterableInterface $query) {
  global $language_content;

  $entity_type = $query->getMetaData('entity_type');

  // Files always upload in the default language. Allow these to be used in
  // all language contexts.
  if ($entity_type == 'file') {
    return;
  }
  $entity_info = entity_get_info($entity_type);
  if (!empty($entity_info['base table']) && !empty($entity_info['entity keys']['id'])) {
    $base_join = $entity_info['base table'] . '.' . $entity_info['entity keys']['id'];
  }

  if (empty($base_join)) {
    watchdog(
      __FUNCTION__,
      'Base table to join language selection not found.',
      NULL,
      WATCHDOG_WARNING
    );
    return;
  }

  $lang_code = $language_content->language;
  $query->join('entity_translation', 'et', 'et.entity_id = ' . $base_join . ' AND et.entity_type = :entity_type', array(':entity_type' => $entity_type));
  $query->condition('et.language', array($lang_code, LANGUAGE_NONE), 'IN');
  $query->condition('et.status', 1);

  if (!empty($query->getMetaData('order_by_entity_translation_created'))) {
    $query->orderBy('et.created', 'DESC');
  }

  $query->distinct();
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Limits a query to nodes with a given Taxonomy Term associated with them.
 */
function wwe_master_query_TermFeed_alter(QueryAlterableInterface $query) {
  $tid = $query->getMetaData('context_tid');

  $query->join('taxonomy_index', 'ti', 'ti.nid = node.nid');
  $query->condition('ti.tid', $tid);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Limits a query to nodes that are not clones.
 */
function wwe_master_query_filter_no_clone_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_clone_parent', 'p', 'node.nid = p.entity_id');
  $query->isNull('p.field_clone_parent_target_id');
}

/**
 * Return list of related nids.
 *
 * @param int $nid
 *   Video, gallery, episode, show, talent or championship node id.
 * @param int $limit
 *   Max number to return.
 * @param string $return_entity_type
 *   Entity types to return, only 'node' and 'taxonomy_term' are
 *   supported by this function.
 * @param array $return_bundles
 *   Node content types to return.
 * @param bool $return_unrelated
 *   Whether to return unrelated items if a reference with
 *   which to find related items can't be found.
 * @param string $geo
 *   Optional ISO country code to filter videos.
 *
 * @return array
 *   Array of entity identifiers (either nids or tids).
 */
function wwe_master_related_items($nid, $limit = 6, $offset = 0, $return_entity_type = 'node', $return_bundles = array(), $return_unrelated = FALSE, $geo = NULL) {
  global $language_content;

  if (!in_array($return_entity_type, array('node', 'taxonomy_term'))) {
    return array();
  }

  if (!empty($geo)) {
    $geo = strtoupper($geo);
  }
  $return_ids = array();
  $show_target_ids = array();
  $episode_target_ids = array();
  $talent_target_ids = array();
  $title_target_id = 0;

  $node = node_load($nid);
  $emw = entity_metadata_wrapper('node', $node);
  $emw->language($language_content->language);

  if ($emw->__isset('field_show_reference') && !empty($emw->field_show_reference->value())) {
    $show_target_ids = $emw->field_show_reference->raw();
  }
  if (!empty($node->field_episode_reference)) {
    $episode_target_ids = $emw->field_episode_reference->raw();
  }
  if (!empty($node->field_talent_reference)) {
    $talent_target_ids = $emw->field_talent_reference->raw();
  }
  if (!empty($node->field_title_reference)) {
    $title_target_id = $emw->field_title_reference->raw();
  }

  $node_type = $emw->getBundle();

  if ($node_type == 'episode') {
    $episode_target_ids = array($emw->getIdentifier());
  }
  elseif ($node_type == 'show') {
    $show_target_id = $emw->getIdentifier();
  }
  elseif ($node_type == 'talent') {
    $talent_target_ids = array($emw->getIdentifier());
  }
  elseif ($node_type == 'championship') {
    $title_target_id = $emw->getIdentifier();
  }

  if (!$return_unrelated && empty($show_target_id) && empty($episode_target_ids) && empty($talent_target_ids) && empty($title_target_id)) {
    // No references to work with, so return empty array.
    return array();
  }

  $query_or = array();
  $query_args = array();

  if ($return_entity_type == 'node') {
    $join_id = 'n.nid';

    $query = db_select('node', 'n')
      ->condition('n.status', NODE_PUBLISHED)
      ->condition('n.nid', $nid, '!=')
      ->range($offset, $limit);

    $query->addField('n', 'nid', 'id');

    if (!empty($return_bundles)) {
      $query->condition('n.type', $return_bundles, 'IN');
    }
  }
  elseif ($return_entity_type == 'taxonomy_term') {
    $join_id = 'td.tid';
    $query = db_select('taxonomy_term_data', 'td')
      ->range($offset, $limit);

    $query->addField('td', 'tid', 'id');

    if (!empty($return_bundles)) {
      $vids = array();
      foreach ($return_bundles as $bundle) {
        $vocab = taxonomy_vocabulary_machine_name_load($bundle);
        $vids[] = $vocab->vid;
      }
      $query->condition('td.vid', $vids, 'IN');
    }
  }

  if (!empty($show_target_ids)) {
    $join_on = "sr.entity_id = $join_id and sr.entity_type = '$return_entity_type'";
    $query->leftJoin('field_data_field_show_reference', 'sr', $join_on);
    $query_or[] = 'sr.field_show_reference_target_id IN (:show_nids)';
    $query_args[':show_nids'] = $show_target_ids;
  }

  if (!empty($episode_target_ids)) {
    $join_on = "er.entity_id = $join_id and er.entity_type = '$return_entity_type'";
    $query->leftJoin('field_data_field_episode_reference', 'er', $join_on);
    $query_or[] = 'er.field_episode_reference_target_id IN (:episode_nids)';
    $query_args[':episode_nids'] = $episode_target_ids;
  }

  if (!empty($talent_target_ids)) {
    $join_on = "tr.entity_id = $join_id and tr.entity_type = '$return_entity_type'";
    $query->leftJoin('field_data_field_talent_reference', 'tr', $join_on);
    $query_or[] = 'tr.field_talent_reference_target_id IN (:talent_nids)';
    $query_args[':talent_nids'] = $talent_target_ids;
  }

  if (!empty($title_target_id)) {
    $join_on = "ttr.entity_id = $join_id and ttr.entity_type = '$return_entity_type'";
    $query->leftJoin('field_data_field_title_reference', 'ttr', $join_on);
    $query_or[] = 'ttr.field_title_reference_target_id = :title_nid';
    $query_args[':title_nid'] = $title_target_id;
  }

  if (!empty($query_or)) {
    $query->where(implode(' OR ', $query_or), $query_args);
  }

  $join_on = "et.entity_id = $join_id and et.entity_type = '$return_entity_type' and et.status = 1";
  $query->join('entity_translation', 'et', $join_on);
  $query->condition('et.language', $language_content->language);

  if ($return_entity_type == 'node') {
    $query->orderBy('n.created', 'DESC');
  }
  elseif ($return_entity_type == 'taxonomy_term') {
    $query->orderBy('td.tid', 'DESC');
  }

  $results = $query->execute()->fetchAll();

  if (!empty($results)) {
    foreach ($results as $r) {
      // Never allow dupes.
      if (!in_array($r->id, $return_ids)) {
        $return_ids[] = $r->id;
      }
    }
  }

  if (!empty($geo)) {
    // Using a closure to be able to send $geo as param to the filter function.
    $return_ids = array_filter($return_ids, function($nid) use($geo) {
      return _ct_video_geo_must_display($nid, $geo);
    });
  }
  return $return_ids;
}

/**
 * Implements hook_preprocess().
 *
 * Allows panels in-place editor to use mlpanels editor renderer
 * (allowing multilingual capabilities).
 */
function wwe_master_preprocess_panels_ipe_pane_wrapper(&$vars) {
  if (!empty($vars['links']['edit']['href']) && strpos($vars['links']['edit']['href'], 'ajax/ipe') > 0) {
    $vars['links']['edit']['href'] = str_replace('ajax/ipe', 'ajax/editor', $vars['links']['edit']['href']);
  }
}

/**
 * Watchdog error reporting.
 *
 * @param array $log_entry
 *   Drupal log entry.
 */
function wwe_master_watchdog(array $log_entry) {
  // Bypasses the watchdog hook if called from an earlier boostrap
  // where some functionality may not be available.
  if (!function_exists('user_access') || !user_access('access WWE configuration')) {
    return;
  }

  // Display EntityMetadataWrapper exceptions to privileged users.
  if (strpos($log_entry['message'], 'EntityMetadataWrapper') !== FALSE) {
    $message = $log_entry['type'] . ': ' . $log_entry['message'];
    drupal_set_message(check_plain($message), 'error wwe_debug');
  }
}

/**
 * Transform a form api element (like a textfield) to multifield.
 *
 * @param array $parents
 *    Position of field.
 * @param array $form
 *    Full form $form array.
 * @param array $form_state
 *    Full form $form_state.
 */
function wwe_master_toolbox_multifield($parents, &$form, &$form_state) {

  // Get the field to transform to a multifield.
  $field = drupal_array_get_nested_value($form, $parents);

  // First parent is the key of our field array.
  $element_name = end($parents);

  // Create id for the fieldset.
  $fieldset_id = "fieldset_multifield_$element_name";

  // Keep in form_state parents for this element, so that we know
  // which field to replace in html / ajax.
  // Use $element_name as a key in array to store information per
  // field (this is necessary if there is several instance of multifield
  // in the same page.). In submit function, we'll be able to retrieve
  // information looking at $form_state['triggering_element'] which
  // contains $element_name too.
  $form_state['wwe_master_fapi_multifield'][$element_name]['parents'] = $parents;

  // Create a fieldset to put field in.
  $form_chunk[$fieldset_id] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="' . $fieldset_id . '">',
    '#suffix' => '</div>',
  );

  // Move some properties of our field to fieldset.
  $additional_properties = array(
    '#title' => '',
    '#description' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#states' => '',
  );

  foreach ($additional_properties as $property => $default_value) {
    // If property is defined, move it from field to fieldset.
    if (isset($field[$property])) {
      $form_chunk[$fieldset_id][$property] = $field[$property];
      unset($field[$property]);
    }
    // If not, set default value for this property.
    else {
      $form_chunk[$fieldset_id][$property] = $default_value;
    }

  }

  // The 'fields_number' contains the number of fields to display to the user
  // for this field instance.
  // If empty, display only number of field specified in $field[#number]; except
  // if previous saved values are superior to default number of fields.
  if (empty($form_state['wwe_master_fapi_multifield'][$element_name]['fields_number'])) {
    $fields_number = count($field['#default_values']) > $field['#number'] ? count($field['#default_values']) : $field['#number'];
    // If #number was set to 'infinite' (-1) or there were not default values
    // set to 1 for the initial item, otherwise list is blank.
    if ($fields_number <= 0) {
      $fields_number = 1;
    }
    $form_state['wwe_master_fapi_multifield'][$element_name]['fields_number'] = $fields_number;
  }

  // Now insert $field inside the $fieldset.
  $field_name = "multifield_$element_name";
  for ($i = 0; $i < $form_state['wwe_master_fapi_multifield'][$element_name]['fields_number']; $i++) {
    $form_chunk[$fieldset_id][$field_name][$i]['value'] = $field;
    $form_chunk[$fieldset_id][$field_name][$i]['value']['#default_value'] = isset($field['#default_values'][$i]) ? $field['#default_values'][$i] : '';
    $form_chunk[$fieldset_id][$field_name][$i]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => $i,
      '#title-display' => 'invisible',
      '#attributes' => array(
        'class' => array('wwe-multifield-item-weight'),
      ),
    );

  }

  // Set tree to TRUE allow all variables of field in form_state['values'].
  $form_chunk[$fieldset_id][$field_name]['#tree'] = TRUE;

  // This theme function add drag and drop to field.
  $form_chunk[$fieldset_id][$field_name]['#theme'] = 'wwe_master_toolbox_fapi_multifield_dragandrop';

  // Add all ajax stuff to add / remove dynamically fields.
  if ($field['#add_more']) {
    // Add more button.
    $form_chunk[$fieldset_id]["wwe_master_fapi_multifield_add_more"] = array(
      // The #element_name is a fake property, so that can easily retrieve
      // element_name in submit callback.
      '#element_name' => $element_name,
      '#type' => 'submit',
      '#value' => t('Add one more'),
      '#name' => "wwe_master_fapi_multifield_add_more_$element_name",
      '#submit' => array("wwe_master_fapi_multifield_submit_add_more"),
      // This avoids validation errors when adding more values.
      '#limit_validation_errors' => array(array($fieldset_id, $element_name)),
      '#ajax' => array(
        'callback' => 'wwe_master_fapi_multifield_ajax',
        'wrapper' => $fieldset_id,
      ),
    );

    // Remove one button.
    if ($form_state['wwe_master_fapi_multifield'][$element_name]['fields_number'] > 1) {
      $form_chunk[$fieldset_id]["wwe_master_fapi_multifield_remove_one"] = array(
        '#element_name' => $element_name,
        '#type' => 'submit',
        '#value' => t('Remove one'),
        '#name' => "wwe_master_fapi_multifield_remove_one_$element_name",
        '#submit' => array('wwe_master_fapi_multifield_submit_remove_one'),
        // Only validate data from fieldset, or all the form will be validated
        // when clicking "add more".
        '#limit_validation_errors' => array(array($fieldset_id, $element_name)),
        '#ajax' => array(
          'callback' => 'wwe_master_fapi_multifield_ajax',
          'wrapper' => $fieldset_id,
        ),
      );
    }
  }

  // Add our fieldset to form.
  drupal_array_set_nested_value($form, $parents, $form_chunk);
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function wwe_master_fapi_multifield_submit_add_more($form, &$form_state, $arg) {
  // Need to retrieve $element_name to get right value from $form_state value.
  $element_name = $form_state['triggering_element']['#element_name'];
  $form_state['wwe_master_fapi_multifield'][$element_name]['fields_number']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */
function wwe_master_fapi_multifield_submit_remove_one($form, &$form_state) {
  $element_name = $form_state['triggering_element']['#element_name'];
  if ($form_state['wwe_master_fapi_multifield'][$element_name]['fields_number']) {
    $form_state['wwe_master_fapi_multifield'][$element_name]['fields_number']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Return portion of the form to rebuild, with added or removed fields.
 */
function wwe_master_fapi_multifield_ajax($form, $form_state) {
  $element_name = $form_state['triggering_element']['#element_name'];
  $parents = $form_state['wwe_master_fapi_multifield'][$element_name]['parents'];
  $output = drupal_array_get_nested_value($form, $parents);
  return $output;
}

/**
 * Theme for make our multifield draggable.
 */
function theme_wwe_master_toolbox_fapi_multifield_dragandrop($variables) {

  $element = $variables['element'];
  $output  = '';
  $rows = array();

  foreach (element_children($element) as $id) {
    $rows[$id]['data'][] = drupal_render($element[$id]['value']);
    $rows[$id]['data'][] = drupal_render($element[$id]['weight']);
    $rows[$id]['class'][] = 'draggable';
  }

  // Set a uniq id for this table.
  $table_id = 'wwe-multifield-table_' . $element['#id'];

  // We can now render our tabledrag table for output.
  $output .= theme('table', array(
    'rows' => $rows,
    'attributes' => array(
      'id' => $table_id,
    ),
  ));

  $output .= drupal_render_children($element);
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'wwe-multifield-item-weight');

  return $output;
}

/**
 * Implements hook_init().
 *
 * Initialize date formats according to the user's current locale.
 * Copied from locale_init(), with modifications.
 *
 * Also loads the lazysizes libraries for custom Picture output.
 */
function wwe_master_init() {
  global $conf, $language_content;
  include_once DRUPAL_ROOT . '/includes/locale.inc';

  // For each date type (e.g. long, short), get the localized date format
  // for the user's current language and override the default setting for it
  // in $conf.
  if (!path_is_admin(current_path())) {
    $languages = array($language_content->language);

    // Setup appropriate date formats for this locale.
    $formats = locale_get_localized_date_format($languages);
    foreach ($formats as $format_type => $format) {
      $conf[$format_type] = $format;
    }
  }

  _wwe_master_picture_libraries_load();
}

/**
 * Loads the lazysizes and lazysizes_aspect_ratio libraries.
 *
 * This is being done here because our custom Picture output does not any of the
 * Picture module rendering systems that would include them if needed.
 */
function _wwe_master_picture_libraries_load() {
  drupal_add_library('picture', 'lazysizes', TRUE);
  // We are not adding support for the Aspect ratio plugin for lazysizes at this
  // time because every picture we output has a fallback and the CSS it includes
  // was causing an issue in admin forms due to this bug:
  // https://www.drupal.org/node/2491101#comment-10499930
}

/**
 * Implements hook_cron().
 */
function wwe_master_cron() {
  /*
   * To address file-publication requirements we've installed a node hook
   * that sets a file's status field to match the owner node's status. But
   * Drupal doesn't use this as a realstatus field - instead, it marks
   * whether a file  is CRON temporary or not, and there's a  hook that
   *  removes temp files. (by default older than 21600).
   *
   * Note this requires us to have a stronger weight (-50) than system (0).
   */

  db_query("UPDATE {file_managed} SET timestamp=:rtime WHERE status=0 and timestamp < :rtime - 20000", array(':rtime' => REQUEST_TIME));
}

/**
 * Gets entity id from entity references.
 *
 * Entity Reference autocomplete module changes the saving based on in being an
 * entity content pane or a node form. This helper function centralizes the
 * processing logic for this.
 *
 * @param mixed $field
 *   Field to get entity ID from.
 *
 * @return mixed
 *   Entity ID on success, FALSE on failure.
 */
function _wwe_master_get_entity_id_from_era($field) {
  // Depending upon how this is placed, the bg_image conf will either be
  // a string (ECP's rendered) or an array (placed directly on page).
  if (is_array($field) && !empty($field['entity_id'])) {
    return $field['entity_id'];
  }
  else {
    // Get the entity id from the autocomplete value. This regex is taken
    // from entityreferencee_autocomplete.module.
    if (preg_match('/.+\((\d+)\)/', $field, $matches)) {
      return $matches[1];
    }
  }

  return FALSE;
}

/**
 * Implements hook_preprocess_page().
 */
function wwe_master_preprocess_page(&$vars) {
  global $language;

  // Add basic site configuration settings variables.
  $site_vars = array('WWE' => array());
  // Add the current language.
  $site_vars['WWE']['language'] = $language->language;
  drupal_add_js($site_vars, 'setting');

  _wwe_master_include_survey_code();
}

/**
 * Helper function to include iPerceptions survey code.
 */
function _wwe_master_include_survey_code() {

  // If admin page, return.
  if(path_is_admin(current_path())) {
    return;
  }

  global $language;

  // Get survey config.
  $survey_conf = variable_get('wwe_survey_module_' . $language->language, array());

  // Check if survey code should be included in Homepage.
  $homepage_survey = !empty($survey_conf['homepage']) && drupal_is_front_page();
  // Check if survey code should be included in other pages.
  $other_pages_survey = !empty($survey_conf['other_pages']) && !drupal_is_front_page() && request_path() != 'wwenetwork' ;

  if ($homepage_survey || $other_pages_survey) {
    // iPerceptions Universal Code for Website Projects (v3).
    $js = "/* Copyright 2011-2015 iPerceptions, Inc. All rights reserved. Do not distribute.iPerceptions provides this code 'as is' without warranty of any kind, either express or implied. */\n window.iperceptionskey = 'ed879ff0-9edc-4c3a-8ef9-9524ecebe5f4';(function () { var a = document.createElement('script'),b = document.getElementsByTagName('body')[0]; a.type = 'text/javascript'; a.async = true;a.src = '//universal.iperceptions.com/wrapper.js';b.appendChild(a);} )();";
    drupal_add_js($js, array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5,
    ));
  }
  else if (request_path() === 'wwenetwork' && variable_get('wwe_survey_network_page_status') == '0') {
    // iPerceptions Universal Code for Website Projects (v3).
    $js = "/* Copyright 2011-2015 iPerceptions, Inc. All rights reserved. Do not distribute.iPerceptions provides this code 'as is' without warranty of any kind, either express or implied. */\n window.iperceptionskey = 'ed879ff0-9edc-4c3a-8ef9-9524ecebe5f4';(function () { var a = document.createElement('script'),b = document.getElementsByTagName('body')[0]; a.type = 'text/javascript'; a.async = true;a.src = '//universal.iperceptions.com/wrapper.js';b.appendChild(a);} )();";
    drupal_add_js($js, array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5,
    ));
  }
}

/**
 * Implements hook_file_url_alter().
 *
 * Comes from https://www.drupal.org/project/protocol_relative_urls.
 *
 * Make URLs protocol relative.
 * Note: protocol relative URLs will cause IE7/8 to download stylesheets twice.
 */
function wwe_master_file_url_alter(&$url) {
  global $base_url;
  static $relative_base_url = NULL, $relative_base_length = NULL;

  if (strpos($url, '.absolute')) {
    $url = str_replace(array('.absolute', '%20'), '', $url);
    return;
  }

  $scheme = file_uri_scheme($url);

  // For some things (e.g., images) hook_file_url_alter can be called multiple
  // times. So, we have to be sure not to alter it multiple times. If we already
  // are relative protocol we can just return.
  // Only setup and parse this once.
  if (!$relative_base_url || !$relative_base_length) {
    $relative_base_url = '//' . file_uri_target($base_url);
    $relative_base_length = strlen($relative_base_url);
  }

  if (!$scheme && substr($url, 0, $relative_base_length) == $relative_base_url) {
    return;
  }

  // When referencing an internal URL return this as absolute from base to avoid
  // adding domain to the path.
  $base_url_parts = parse_url($base_url);
  $base_url_domain = !empty($base_url_parts['host']) ? $base_url_parts['host'] : '';
  $base_url_length = strlen($base_url_domain);
  if ($base_url_length == ($relative_base_length - 2) && empty($scheme)) {
    if (strpos($url, '/') !== 0) {
      $url = '/' . str_replace(' ', '%20', $url);
    }
    return;
  }

  // If external URL then leave as is.
  $url_parts = parse_url($url);
  if (!empty($url_parts['host']) && $url_parts['host'] !== $base_url_domain && empty($scheme)) {
    return;
  }

  // Handle the case where we have public files with the scheme public:// or
  // the case the relative path doesn't start with a /. Internal relative urls
  // have the base url prepended to them.
  if (!$scheme || $scheme == 'public') {
    // Internal Drupal paths.
    if (!$scheme) {
      $path = $url;
    }
    else {
      $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
      $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($url);
    }

    // Clean up Windows paths.
    $path = str_replace('\\', '/', $path);
    $path = str_replace(' ', '%20', $path);
    $url = $base_url . '/' . $path;
  }

  if (strpos($url, '.absolute')) {
    $url = str_replace('.absolute', '', $url);
  }
  else {
    // Convert full URLs to relative protocol.
    $base_url_parts = parse_url($base_url);
    $base_url_domain = !empty($base_url_parts['host']) ? $base_url_parts['host'] : '';
    $base_url_length = strlen($base_url_domain);

    // Only parse when url contains the base url.
    if (strpos($url, $base_url_domain) !== FALSE) {
      $file_url_parts = parse_url($url);
      $file_url_domain = !empty($base_url_parts['host']) ? $base_url_parts['host'] : '';
      $file_url_length = strlen($base_url_domain);

      if ($file_url_domain == $base_url_domain) {
        // Split on the domain and only return path after domain.
        list($tmp, $url) = explode($base_url_domain, $url);
        if (strpos($url, '/') !== 0) {
          $url = '/' . str_replace(' ', '%20', $url);
        }
      }
    }
  }
}

/**
 * Implements hook_file_presave().
 *
 * WEB-338: Handle filenames with spaces better when uploaded through the CMS.
 */
function wwe_master_file_presave($file) {
  $url = str_replace(array(' ', '%20'), '_', trim($file->filename));
  $file->filename = $url;
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Locale module will always force an absolute URL when making calls with url().
 * This code runs after locale and will ensure if we are on the same domain we
 * will remove the domain so that we can be nicer to Akamai caching.
 *
 * @see https://api.drupal.org/comment/42603#comment-42603
 */
function wwe_master_url_outbound_alter(&$path, &$options, $original_path) {
  // Exclude Facebook OAUth urls from removing absolute, as the FB SDK
  // requires $helper->getLoginUrl to match what is in the target hostname:
  // https://github.com/facebook/facebook-php-sdk-v4/issues/473#issuecomment-168556306
  if (strpos($path, 'fb-instant-articles/api/login') !== FALSE) {
    return;
  }

  global $language;
  if ($options['external'] == FALSE && $options['language']->language == $language->language) {
    $options['absolute'] = FALSE;
  }

  if (!empty($options['query']['destination']) && strpos($options['query']['destination'], 'admin/content') === 0 && preg_match('/node\/(\d+)\/(edit|translate)/', $path)) {
    unset($options['query']['destination']);
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Comes from https://www.drupal.org/project/protocol_relative_urls.
 */
function wwe_master_module_implements_alter(&$implementations, $hook) {
  // Move Protocol Relative URLs to the bottom.
  if ($hook === 'file_url_alter' && array_key_exists('protocol_relative_urls', $implementations)) {
    $item = $implementations['protocol_relative_urls'];
    unset($implementations['protocol_relative_urls']);
    $implementations['protocol_relative_urls'] = $item;
  }
  if ($hook == 'entity_load' && array_key_exists('applenews', $implementations)) {
    unset($implementations['applenews']);
    $implementations['applenews'] = 0;
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Adds contextual rendering of content to panes.
 */
function wwe_master_query_contextual_breaker_alter(QueryAlterableInterface $query) {
  // See if dealing with a node first.
  $node = menu_get_object();
  if (empty($node)) {
    return;
  }

  $emw = entity_metadata_wrapper('node', $node);
  // Add superstar references.
  // Possibly should add all eligible references to this in the future.
  if ($node->type == 'talent') {
    $query->leftJoin('field_data_field_talent_reference', 'tr', '(tr.entity_id = node.nid AND tr.entity_type = \'node\')');
    // Add NULL values to  automatically fill in records.
    $or = db_or()
      ->condition('tr.field_talent_reference_target_id', $node->nid)
      ->condition('tr.field_talent_reference_target_id', NULL, "IS NULL");
    $query->condition($or);

    // Get any preexisting orders and reset so NOT NULL orders first.
    // This allows the contextual items to show first then ones that did not
    // contain a reference.
    $sort_order =& $query->getOrderBy();
    $sort_order = array_merge(array('tr.field_talent_reference_target_id IS NULL' => 'ASC'), $sort_order);
  }

  // Add show references.
  if ($node->type == 'show') {
    $query->leftJoin('field_data_field_show_reference', 'tr', '(tr.entity_id = node.nid AND tr.entity_type = \'node\')');
    // Add NULL values to  automatically fill in records.
    $or = db_or()
      ->condition('tr.field_show_reference_target_id', $node->nid)
      ->condition('tr.field_show_reference_target_id', NULL, "IS NULL");
    $query->condition($or);

    // Get any preexisting orders and reset so NOT NULL orders first.
    // This allows the contextual items to show first then ones that did not
    // contain a reference.
    $sort_order =& $query->getOrderBy();
    $sort_order = array_merge(array('tr.field_show_reference_target_id IS NULL' => 'ASC'), $sort_order);
  }
}

/**
 * Logic to render the sponsor or sponsors and pass them to theme.
 *
 * @param EntityMetadataWrapper $emw
 *   The entity object to be themed.
 *
 * @return array
 *   Render array for sponsorships.
 */
function wwe_master_render_sponsors(EntityMetadataWrapper $emw, $overrides = array()) {
  // @todo: Update from WWECotentPane as changes are made there.

  global $language_content;
  $sponsors = array();
  $sponsor_nodes = array();
  // DFP tracking pixel containers.
  $dfp_pixel_markup = '';
  if (!empty($emw->raw()->field_sponsorship[$language_content->language])) {
    $sponsor_nodes = $emw->field_sponsorship->value();
  }
  foreach ($sponsor_nodes as $key => $sponsor_node) {
    // Don't render unpublished sponsors.
    if (empty($sponsor_node->status) || empty($sponsor_node->translations->data[$language_content->language]['status'])) {
      continue;
    }
    $sponsors['data'][$key] = array(
      'name' => FALSE,
      'prefix' => FALSE,
      'link' => FALSE,
      'link_raw' => FALSE,
      'image' => FALSE,
      'image_raw' => FALSE,
    );
    $sponsor_emw = entity_metadata_wrapper('node', $sponsor_node);
    $sponsor_emw->language($language_content->language);
    if ($sponsor_emw->__isset('field_reference_redirect') && !empty($sponsor_emw->field_reference_redirect->value())) {
      $redirect_emw = entity_metadata_wrapper('node', $sponsor_emw->field_reference_redirect->value());
      $sponsors['data'][$key]['link_raw'] = url('node/' . $redirect_emw->getIdentifier());
    }
    elseif ($sponsor_emw->__isset('field_link') && !empty($sponsor_emw->field_link->value())) {
      $link = $sponsor_emw->field_link->value();
      $sponsors['data'][$key]['link_raw'] = $link['url'];
    }
    if ($sponsor_emw->__isset('field_teaser_title') && !empty($sponsor_emw->field_teaser_title->value())) {
      $sponsors['data'][$key]['name'] = $sponsor_emw->field_teaser_title->value();
    }
    else {
      $sponsors['data'][$key]['name'] = $sponsor_emw->field_title->value();
    }
    if ($sponsor_emw->__isset('field_short_headline') && !empty($sponsor_emw->field_short_headline->value())) {
      $sponsors['data'][$key]['prefix'] = $sponsor_emw->field_short_headline->value();
    }

    if ($sponsor_emw->__isset('field_primary_image') && !empty($sponsor_emw->field_primary_image->value())) {
      $image = $sponsor_emw->field_primary_image->value();
      // If the sponsor is on an overlay, use the sponsor's thumbnail image.
      if ($overrides['in_overlay']) {
        if ($sponsor_emw->__isset('field_thumbnail_image') && !empty($sponsor_emw->field_thumbnail_image->value())) {
          $image = $sponsor_emw->field_thumbnail_image->value();
        }
      }
      if (!empty($image->uri)) {
        $sponsors['data'][$key]['image'] = theme('wwe_render_picture', array(
          'image_uri' => $image->uri,
          'alt' => $image->alt,
          'title' => $image->title,
          'fallback' => 'wwe_show_logo_sm',
          'mapping' => 'shows_hub_premier_logos',
          'attributes' => array(),
        ));
        $sponsors['data'][$key]['image_raw'] = file_create_url($image->uri);
      }
      if ($sponsors['data'][$key]['link_raw']) {
        $sponsors['data'][$key]['link'] = l($sponsors['data'][$key]['name'], $sponsors['data'][$key]['link_raw']);

        // Sponsorships can have custom DFP params. Set them to
        // data attributes for wwe-ads.js
        // No spaces are allowed in any of these values. Remove quotes as
        // well so as to not break the data attribute.
        $nonvalid_characters = array('"', ' ');
        $dcampaign = '';
        $dcommit = '';
        // Cardtype is the element used, so the type of node should suffice.
        $dcardtype = ' data-dcardtype="' . str_replace($nonvalid_characters, '', $emw->getBundle()) . '"';
        if ($sponsor_emw->__isset('field_sponsorship_dcampaign') && !empty($sponsor_emw->field_sponsorship_dcampaign->value())) {
          $dcampaign = ' data-dcampaign="' . str_replace($nonvalid_characters, '', $sponsor_emw->field_sponsorship_dcampaign->value()) . '"';
        }
        if ($sponsor_emw->__isset('field_sponsorship_dcommit') && !empty($sponsor_emw->field_sponsorship_dcommit->value())) {
          $dcommit = ' data-dcommit="' . str_replace($nonvalid_characters, '', $sponsor_emw->field_sponsorship_dcommit->value()) . '"';
        }
        $dom = 'wwe-ad--sponsored-content';
        $dfp_pixel_markup = '<div id="' . $dom . '-' . rand() . '" class="' . $dom . '"' . $dcampaign . $dcommit . $dcardtype . '></div>';
      }
    }
  }
  if (!empty($sponsors)) {
    $count = count($sponsors['data']);
    if ($count == 1) {
      $sponsors['vars']['multiple'] = FALSE;
    }
    elseif ($count > 1) {
      $sponsors['vars']['multiple'] = TRUE;
    }
    $variables['sponsors'] = $sponsors;
    $sponsors['rendered'] = theme('sponsor_links', $variables);
    // Update the rendered markup to contain a DFP pixel.
    $sponsors['rendered'] = $sponsors['rendered'] . $dfp_pixel_markup;
  }
  else {
    $sponsors['rendered'] = '';
    $sponsors['vars']['multiple'] = FALSE;
    $sponsors['vars']['classes'] = FALSE;
  }
  return $sponsors;
}

/**
 * Helper function to generate typical options array for links in teaser panes.
 *
 * @param EntityMetadataWrapper $emw
 *   Entity being linked to.
 * @param array $params
 *   Optional additional configuration parameters.
 *   - classes
 *   - link_type (text or image)
 *   - position (position within pane).
 */
function wwe_master_teaser_link_options(EntityMetadataWrapper $emw, $params = array()) {
  global $language_content;

  $emw->language($language_content->language);
  $button_type = $emw->getBundle();

  if ($emw->getBundle() == 'video_playlist') {
    $button_type = 'video';
  }

  $classes = array();
  if (!empty($params['classes'])) {
    $classes = $params['classes'];
  }

  $standard_classes = array(
    'js-' . $button_type . '--btn',
    'js-track',
  );

  $options = array(
    'html' => TRUE,
    'attributes' => array(
      'class' => array_merge($classes, $standard_classes),
      'data-nid' => $emw->getIdentifier(),
      'data-tracking-label' => 'contentTitle=' . $emw->label() . '|contentType=' . $emw->getBundle(),
      'data-ct' => $emw->getBundle(),
    ),
  );

  if (!empty($params['link_type'])) {
    $options['attributes']['data-tracking-label'] .= '|linkType=' . $params['link_type'];
  }

  if (!empty($params['position'])) {
    $options['attributes']['data-position'] = $params['position'];
    $options['attributes']['data-tracking-label'] .= '|position=' . $params['position'];
  }

  if (!empty($params['slot'])) {
    $options['attributes']['data-slot'] = $params['slot'];
    $options['attributes']['data-tracking-label'] .= '|slot=' . $params['slot'];
  }

  if ($emw->getBundle() == 'video_playlist') {
    $options['attributes']['data-nid'] = 0;
    $options['attributes']['data-playlist-id'] = $emw->getIdentifier();
  }
  elseif ($emw->getBundle() == 'link') {
    $options['attributes']['target'] = '_blank';
  }

  if (!empty($params['has_node_obj'])) {
    $options['attributes']['data-vr-excerpttitle'] = '';
  }

  return $options;
}

/**
 * Function to determine if node translation published in current language.
 *
 * @param int $nid
 *   A drupal node's identifier.
 *
 * @return bool
 *   If the node is published.
 */
function wwe_master_node_translation_is_published($nid) {
  global $language_content;

  $query = "SELECT 1 FROM {node} n
    JOIN {entity_translation} et ON et.entity_type = 'node' AND et.entity_id = n.nid
    WHERE n.status = 1 AND et.status = 1 AND et.language = :lang AND n.nid = :nid;";

  $query_args = array(
    ':nid' => $nid,
    ':lang' => $language_content->language,
  );

  return (int) db_query($query, $query_args)->fetchField();
}

/**
 * Implements hook_js_alter().
 */
function wwe_master_js_alter(&$javascript) {
  // Move theme angular to top. This could be done in a hook preprocess
  // and drupal_add_js to the JS_LIBRARY group.
  $module_path = drupal_get_path('module', 'wwe_master');
  $javascript[$module_path . '/js/angular.min.js']['group'] = JS_LIBRARY;
  $javascript[$module_path . '/js/angular.min.js']['requires_jquery'] = FALSE;
  $javascript[$module_path . '/app/app.js']['group'] = JS_LIBRARY;
  $javascript[$module_path . '/app/app.js']['requires_jquery'] = FALSE;
}

/**
 * Implements hook_metatag_metatags_view_alter().
 *
 * WEB-295 - We need to make sure the og:image is a full url and uses https://
 */
function wwe_master_metatag_metatags_view_alter(&$output, $instance, $options) {
  global $base_secure_url;
  $og_image = $output['og:image']['#attached']['drupal_add_html_head'][0][0]['#value'];
  if (!preg_match('/^http/', $og_image)) {
    $output['og:image']['#attached']['drupal_add_html_head'][0][0]['#value'] = $base_secure_url . $og_image;
  }
  if (!empty($output['title']['#attached']['metatag_set_preprocess_variable'][0][2])) {
    $output['title']['#attached']['metatag_set_preprocess_variable'][0][2] = htmlentities($output['title']['#attached']['metatag_set_preprocess_variable'][0][2]);
  }
}

/**
 * Builds the byline markup from EWM.
 *
 * @param object $emw
 *   Entity Metadata Wrapper for node.
 *
 * @return string
 *   Byline string.
 */
function wwe_master_build_render_byline($emw) {
  // Default value.
  $byline = "WWE.com Staff";
  // Build the byline.
  if ($emw->__isset('field_byline') && !empty($emw->field_byline->value())) {
    // Only use the first byline.
    $byline_value = $emw->field_byline[0]->value();
    $byline_emw = entity_metadata_wrapper('taxonomy_term', $byline_value);
    $byline = $byline_emw->label();
  }
  $byline = json_encode($byline, JSON_HEX_QUOT);
  return $byline;
}

/**
 * Gets the image information needed in the head.
 *
 * @param object $emw
 *   Drupal file EMW.
 *
 * @return string
 *   Image information.
 */
function wwe_master_build_render_head_image($img_variables) {
  global $base_url;
  $img_information = array(
    '@type' => 'ImageObject',
    'url' => $base_url . $img_variables['src'],
    'height' => $img_variables['height'],
    'width' => $img_variables['width'],
  );
  return $img_information;
}

/**
 * Gets the logo to be displayed in Google Search results.
 *
 * @return object
 *   The built logo.
 */
function wwe_master_seo_render_logo() {
  $logo_image = '';
  $logo_fid = variable_get('wwe_amp_wwe_logo', NULL);
  if (!empty($logo_fid)) {
    $logo_file = file_load($logo_fid);
    $file_emw = entity_metadata_wrapper('file', $logo_file);
    $img_variables = wwe_master_get_image_variables($file_emw);

    if ($img_variables != NULL) {
      // Validates logo size.
      if ($img_variables['height'] != WWE_MASTER_SEARCH_LOGO_HEIGHT && $img_variables['width'] != WWE_MASTER_SEARCH_LOGO_WIDTH) {
        $factor = WWE_MASTER_SEARCH_LOGO_HEIGHT / $img_variables['height'];
        $img_variables['height'] = WWE_MASTER_SEARCH_LOGO_HEIGHT;
        $img_variables['width'] *= $factor;
      }
      $logo_image = wwe_master_build_render_head_image($img_variables);
    }
  }
  return $logo_image;
}

/**
 * Generate the image variables to be applied on the theme.
 *
 * @param object $emw
 *   Drupal file EMW.
 *
 * @param object $img_style
 *   Image dimension style.
 *
 * @return array
 *   Image variables.
 */
function wwe_master_get_image_variables($emw, $img_style = 'gallery_img_ml') {
  $dimensions = !empty($emw->value()) ? image_get_info($emw->uri->value()) : NULL;
  if (isset($dimensions) && !is_array($dimensions) && (!empty($emw->value()->height) && !empty($emw->value()->width))) {
    $dimensions['height'] = $emw->value()->height;
    $dimensions['width'] = $emw->value()->width;
  }
  elseif (is_array($dimensions)) {
    image_style_transform_dimensions($img_style, $dimensions);
  }
  $alt = '';
  if ($emw->__isset('field_file_image_alt_text') && !empty($emw->field_file_image_alt_text->value())) {
    $alt = $emw->field_file_image_alt_text->value();

    // Replace inner double quotes with simple quotes to avoid breaking the markup
    $alt = str_replace('"', '\'', $alt);
  }
  if (!empty($dimensions)) {
    $img_variables = array(
      'src' => image_style_url($img_style, $emw->uri->value()),
      'srcset' => '',
      'width' => $dimensions['width'],
      'height' => $dimensions['height'],
      'alt' => addslashes($alt),
    );
    return $img_variables;
  }
  else {
    return NULL;
  }
}

/**
 * Gets the image to be displayed in Google Search results.
 *
 * @param object $field
 *   Data field used to get the image (primary image, thumbnail image).
 *
 * @return object
 *   The built image.
 */
function wwe_master_seo_render_image_results($field) {
  $image = '';
  if (!empty($field) && $field->type == 'fe_photo') {
    $file_emw = entity_metadata_wrapper('file', $field);
    $img_variables = wwe_master_get_image_variables($file_emw);

    if ($img_variables != NULL) {
      // Check min pixels width for Google Search results image size. Resize it if necessary.
      if ($img_variables['width'] < WWE_MASTER_SEARCH_IMAGE_MIN_WIDTH) {
        $factor = WWE_MASTER_SEARCH_IMAGE_MIN_WIDTH / $img_variables['width'];
        $img_variables['width'] = WWE_MASTER_SEARCH_IMAGE_MIN_WIDTH;
        $img_variables['height'] *= $factor;
      }
      $image = wwe_master_build_render_head_image($img_variables);
    }
  }
  return $image;
}

/**
 * Implements hook_preprocess_html().
 *
 * Includes the Json-LD structured data.
 */
function wwe_master_preprocess_html() {
  if (user_is_logged_in()) {
    $module_path = drupal_get_path('module', 'wwe_master');
    drupal_add_css($module_path . '/css/wwe_master.css');
  }

  $node = menu_get_object();
  // If this wasn't a valid node lookup, return nothing.
  $content_types = array('article', 'video');
  if (!is_object($node) || !in_array($node->type, $content_types)) {
    return;
  }
  global $language_content;
  global $base_url;
  $emw = entity_metadata_wrapper('node', $node);
  $emw->language($language_content->language);
  $headline = truncate_utf8($node->title, WWE_MASTER_SEARCH_HEADLINE_LIMIT, false, true);
  $headline = json_encode($headline, JSON_HEX_QUOT | JSON_UNESCAPED_UNICODE);
  $publication_date = format_date($emw->created->value(), 'custom', 'c', NULL, $language_content->language);
  $date_modified = format_date($emw->changed->value(), 'custom', 'c', NULL, $language_content->language);
  $byline = wwe_master_build_render_byline($emw);
  $logo_image = wwe_master_seo_render_logo();
  $path = drupal_get_path_alias('node/' . $emw->getIdentifier());
  $original_path = $base_url . '/' . $path;

  $json = array (
    "@context" => "https://schema.org",
    "headline" => $headline,
    "datePublished" => $publication_date,
    "author"=> array (
      "@type" => "Person",
      "name" => $byline,
    ),
    "publisher" => array (
      "@type" => "Organization",
      "name" => "WWE",
      "logo" => $logo_image,
    ),
    "dateModified" => $date_modified,
    "mainEntityOfPage" => $original_path,
  );
  $image = array();
  if ($emw->__isset('field_thumbnail_image') && !empty($emw->field_thumbnail_image->value())) {
    $image = wwe_master_seo_render_image_results($emw->field_thumbnail_image->value());
  }
  switch ($node->type) {
    case 'article':
      $json['@type'] = ucfirst($node->type);
      if (!empty($image)) {
        $json["image"] = $image;
      }
      if ($emw->__isset('body') && !empty($emw->body->value())) {
        $json["articleBody"] = strip_tags($emw->body->value->value());
        $json["wordCount"] = str_word_count($json["articleBody"]);
      }
      if ($emw->__isset('field_talent_reference') && !empty($emw->field_talent_reference->value())) {
        foreach ($emw->field_talent_reference->value() as $talent) {
          // Ensure a valid talent exists.
          if (empty($talent->nid)) {
            continue;
          }
          // Ensure the talent is published.
          if (!empty($talent->status == 0)) {
            continue;
          }
          $talent_emw = entity_metadata_wrapper('node', $talent->nid);
          $references[] = array(
            "@type" => "Person",
            "name" => $talent_emw->label(),
          );
        }
        $json["character"] = $references;
      }
      break;
    case 'video':
      $json['@type'] = 'VideoObject';

      // According to https://search.google.com/structured-data/testing-tool/u/0/
      // name, uploadDate, thumbnailUrl and description are required.
      $json['thumbnailUrl'] = $image['url'];
      $json['name'] = $headline;
      $json['uploadDate'] = $publication_date;
      if ($emw->__isset('body') && !empty($emw->body->value())) {
        $json['description'] = filter_xss($emw->body->value->value(), array());
      }

      if ($emw->__isset('field_caption_object') && !empty($emw->field_caption_object->value())) {
        $caption_list = array();
        $captions = json_decode($emw->field_caption_object->value());
        // Build an array keyed by caption language.
        foreach ($captions as $caption) {
          $caption_list[$caption->cc_lang_id] = $caption->cc_url;
        }
        // Use the caption url from the current language if available or default to English if not.
        $cc_url = '';
        if (!empty($caption_list[$language_content->language])) {
          $cc_url = $caption_list[$language_content->language];
        }
        elseif (!empty($caption_list['en'])) {
          $cc_url = $caption_list['en'];
        }
        if (!empty($cc_url)) {
          $json['transcript'] = wwe_master_seo_get_video_transcript($cc_url);
        }
      }
      // adding vms_id in drupal setting variable
      if ($emw->__isset('field_vms_id') && !empty($emw->field_vms_id->value())) {
        drupal_add_js(array(
          'videos' => array(
          'vms_id' => $emw->field_vms_id->value(),
          ),
        ), 'setting');
      }
      break;
    default:
      return;
  };

  // Add script tag to head.
  $inline_script = '<script type="application/ld+json">' . json_encode($json, JSON_PRETTY_PRINT) . '</script>';
  drupal_add_html_head(array(
    '#type' => 'markup',
    '#markup' => $inline_script,
  ), 'meta_structured_data');
}

/**
 * Helper function to read a video transcript from file.
 *
 * @param string $url
 *   File to read the transcript from.
 * @return string Video transcript.
 */
function wwe_master_seo_get_video_transcript($url) {
  $transcript = '';
  try {
    $request = drupal_http_request($url);
    if (isset($request->data)) {
      $transcript = html_entity_decode($request->data);
    }
    else {
      watchdog(
        'wwe_master: ' . __FUNCTION__,
        'Error reading video transcript for the following transcript file: %file',
        array('%file' => $url),
        WATCHDOG_ERROR
      );
    }
  }
  catch (Exception $ex) {
    watchdog(
      'wwe_master: ' . __FUNCTION__,
      'Exception reading video transcript for the following transcript file: %file. ' . $ex->getMessage(),
      array('%file' => $url),
      WATCHDOG_ERROR
    );
  }
  return $transcript;
}

/**
 * Helper function to get alt and title attributes when these are empty.
 *
 * First we check if the attribute is being passed. If not, check if the image
 * entity has any of those values; otherwise, if not empty, use its caption.
 * If there's still no value, get it from the the node's title. If the image is
 * not inside a node, check for the HTML title. If we still don't have a value
 * or it is related to Infinite Scroll, then use the default one.
 *
 * @param array $variables
 *   Variables passed to the theme function.
 * @param string $primary_tag
 *   First option to look for.
 * @param string $seconday_tag
 *   Second option to look for.
 *
 * @return string
 *   Image alt/title attribue.
 */
function _wwe_master_get_image_alt_or_title($variables = NULL, $primary_tag = 'alt', $seconday_tag = 'title') {
  // 1- Check if the attribute is set.
  // Check if variables is not NULL.
  if (!empty($variables)) {
    // WEB-861: Default values to avoid using.
    $default_options = array(
      'WWE Photo',
      'WWE Image',
      WWE_ADA_NO_ALT_TEXT,
    );

    // As the attributes may come in, for example, $variables[attributes]['alt']
    // or in $variables['alt'], we would implement the same logic as in
    // theme_image() to use the proper one, based on Drupal's core.
    $attributes = $variables['attributes'];

    foreach (array('alt', 'title') as $key) {
      if (!empty($variables[$key])) {
        $attributes[$key] = $variables[$key];
      }
    }

    // Check for the primary tag.
    if (!empty($attributes[$primary_tag]) && !in_array($attributes[$primary_tag], $default_options)) {
      return $attributes[$primary_tag];
    }
    // If empty, check for the secondary tag.
    elseif (!empty($attributes[$seconday_tag]) && !in_array($attributes[$seconday_tag], $default_options)) {
      return $attributes[$seconday_tag];
    }
    // If still empty, check if the file entity has attributes. Since we only
    // have the uri, the only way to grab the fid is searching it directly in
    // the database.
    elseif (!empty($variables['image_uri'])) {
      $result = db_query("
        SELECT fm.fid
        FROM {file_managed} fm
        WHERE fm.uri = :uri
        ",
        array(
          ':uri' => $variables['image_uri'],
        )
      );

      $record = $result->fetchObject();

      if (!empty($record)) {
        $file_emw = entity_metadata_wrapper('file', $record->fid);

        // Search the corresponding field for each tag.
        $field_map = array(
          'alt' => 'field_file_image_alt_text',
          'title' => 'title_field',
        );
        $primary_field = array_key_exists($primary_tag, $field_map) ? $field_map[$primary_tag] : NULL;
        $secondary_field = array_key_exists($seconday_tag, $field_map) ? $field_map[$seconday_tag] : NULL;

        // Check for the primary field.
        if (!empty($primary_field)) {
          $value = _wwe_master_get_image_seo_attribute($file_emw, $primary_field);
        }
        // If empty or one of the default values, check for the secondary field.
        if ((empty($value) || in_array($value, $default_options)) && !empty($secondary_field)) {
          $value = _wwe_master_get_image_seo_attribute($file_emw, $secondary_field);
        }
        // If still empty or one of the default values, check for the caption.
        if (empty($value) || in_array($value, $default_options)) {
          $value = _wwe_master_get_image_seo_attribute($file_emw, 'field_caption');
        }
        // If we have a value and it is not one of the default ones, use it.
        if (!empty($value) && !in_array($value, $default_options)) {
          return $value;
        }
      }
    }
  }

  // If we still don't have a value, get it from the the node's title.
  $node = menu_get_object();
  if (is_object($node)) {
    $value = $node->title;
  }
  // If it is not inside a node, check for the HTML title.
  else {
    $value = drupal_get_title();
    $value = substr($value, strpos($value, '|'), strlen($value));
    $value = trim($value);
  }

  // If there is still no alt text or if it's populated with an "invalid"
  // title, use default.
  $not_allowed = array(
    'Infinite Scroll',
    'Transporter',
    'Gallery Loader ajax',
    'WWE Image',
  );
  if (in_array($value, $not_allowed) || empty($value)) {
    $value = variable_get('wwe_image_default_alt_text', 'WWE Photo');
  }

  return $value;
}

/**
 * Gets an specific SEO attribute from an image.
 *
 * @param type $image_emw
 *   Image entity metadata wrapper.
 * @param type $field
 *   Image entity field to search for.
 *
 * @return string
 *   Image alt/title/caption attribue.
 */
function _wwe_master_get_image_seo_attribute($image_emw, $field) {
  // Allowed fields.
  $allowed = array(
    'field_file_image_alt_text',
    'title_field',
    'field_caption',
  );

  // If some of the paramteres is not passed, or the field is not allowed, quit.
  if (empty($image_emw) || empty($field) || !in_array($field, $allowed)) {
    return;
  }

  global $language_content;
  $image_emw->language($language_content->language);

  if ($image_emw->__isset($field) && !empty($image_emw->$field->value())) {
    return $image_emw->$field->value();
  }
}

/**
 * Verify if a file exists by checking its MD5 hash.
 *
 * @param object $file
 *   A file like a photo, document, etc.
 *
 * @return string
 *   The fid of the existing file.
 */
function wwe_master_file_check_md5($file) {
  if (!empty($file->uri)) {
    $query = db_select('file_md5', 'f');
    $query->leftJoin('file_managed', 'fm', 'f.fid = fm.fid');
    $query
      ->fields('f', array('fid'))
      ->fields('fm', array('type'))
      ->condition('f.md5', md5_file($file->uri), '=');

    $file_info = $query->execute()->fetchAssoc();

    if (!empty($file_info)) {
      return $file_info;
    }
  }
}

/**
 * Stores a file's MD5 hash.
 *
 * @param object $file
 *   A file like a photo, document, etc.
 */
function wwe_master_file_save_md5($file) {
  if (is_object($file)) {
    db_insert('file_md5')
      ->fields(array(
        'fid' => $file->fid,
        'md5' => md5_file($file->uri)
      ))
     ->execute();
  }
}

/**
 * Implements hook_entity_delete().
 */
function wwe_master_entity_delete($entity, $type) {
  // Delete the MD5 hash registry of the file being deleted.
  if ($type == 'file') {
    db_delete('file_md5')
      ->condition('fid', $entity->fid, '=')
      ->execute();
  }
}

/**
 * Gets the Schema Org object name based on a bundle.
 *
 * @param $bundle
 *   The content type name.
 *
 * @return string
 *   Schema Org object name.
 */
function wwe_master_seo_get_schema_org_name($bundle) {
  $return = '';
  $names = array(
    'video' => 'VideoObject',
    'video_playlist' => 'VideoObject',
    'fe_photo' => 'ImageObject',
    'gallery' => 'ImageGallery',
    'article' => 'NewsArticle',
    'match' => 'NewsArticle',
    'episode' => 'TVEpisode',
  );

  if (array_key_exists($bundle, $names)) {
    $return = $names[$bundle];
  }

  return $return;
}

/**
 * Prepares the Schema Org information to be shown in the frontend (contains:
 * itemtype, name, url, thumbnailUrl, description and datePublished).
 *
 * @param string $schema_org_type
 *   The Schema Org Object name.
 * @param string $name
 *   The name of the item.
 * @param string $url
 *   URL of the item.
 * @param string $thumbnail_uri
 *   A thumbnail image relevant to the thing.
 * @param object $wrapper
 *   An Entity metadata wrapper.
 *
 * @return array
 *   An array containing Schema Org data.
 */
function wwe_master_seo_prepare_schema_org_properties($schema_org_type, $name, $url, $thumbnail_uri, $wrapper) {
  global $base_url;
  $url_protocol = $base_url;
  $protocol = isset($_SERVER["HTTPS"]) ? 'https' : 'http';
  $seo_data = array();

  if ($protocol == 'http') {
    $url_protocol = str_replace("http","https",$base_url);
  }

  if (!empty($schema_org_type)) {
    $seo_data['itemtype'] = 'https://schema.org/' . $schema_org_type;
  }

  if (!empty($name)) {
    $seo_data['property']['name'] = $name;
  }

  if (!empty($url)) {
    $seo_data['property']['url'] = $url_protocol . $url;
  }

  if (!empty($thumbnail_uri)) {
    $seo_data['property']['thumbnailUrl'] = $url_protocol . file_create_url($thumbnail_uri);
  }

  if (!empty($wrapper->body->summary->value())) {
    $seo_data['property']['description'] = strip_tags($wrapper->body->summary->value());
  }
  elseif (!empty($wrapper->body->value->value())) {
    $seo_data['property']['description'] = strip_tags($wrapper->body->value->value());
  }

  if (!empty($wrapper->field_creation_date->value())) {
    $creation_date = $wrapper->field_creation_date->value();
  }
  else {
    $creation_date = $wrapper->created->value();
  }
  $seo_data['property']['datePublished'] = format_date($creation_date, 'short');

  return $seo_data;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Allow user to filter taxonomy list results.
 */
function wwe_master_query_term_access_alter(QueryAlterableInterface $query) {
  $path = current_path();
  // Only alter venue terms page's query.
  if ($path == 'admin/structure/taxonomy/venue' && !empty($_GET['search'])) {
    $tables =& $query->getTables();
    if (!empty($tables['t']) && $tables['t']['table'] == 'taxonomy_term_data') {
      // Get search term.
      $search = isset($_GET['search']) ? drupal_explode_tags($_GET['search']) : '';
      $search_term = !empty($search[0]) ? $search[0] : '';
      $query->condition('t.name', '%' . db_like($search_term) . '%', 'LIKE');
    }
  }
}

/**
 * Implements of hook_form_FORM_ID_alter().
 *
 * @see taxonomy_overview_terms()
 */
function wwe_master_form_taxonomy_overview_terms_alter(&$form, &$form_state, $form_id) {
  $path = current_path();
  if ($path == 'admin/structure/taxonomy/venue') {
    $form['#attached']['js'][] = drupal_get_path('module', 'wwe_master') . '/js/wwe_master_taxonomy_search.js';
    // Add fields to taxonomy list page.
    $form['taxonomy_overview_terms_search'] = array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('container-inline', 'taxonomy-overview-terms-search')),
    );
    $form['taxonomy_overview_terms_search']['search'] = array(
      '#type' => 'textfield',
      '#title' => t('Search'),
      '#default_value' => isset($_GET['search']) ? html_entity_decode(filter_xss($_GET['search'], array())) : '',
      '#autocomplete_path' => 'wwe-master/taxonomy/autocomplete/venue',
    );
    $form['taxonomy_overview_terms_search']['search_button'] = array(
      '#type' => 'button',
      '#value' => t('Search'),
    );
    $form['taxonomy_overview_terms_search']['reset_button'] = array(
      '#type' => 'button',
      '#value' => t('Reset'),
    );
  }
}

/**
 * Implements hook_page_alter().
 */
function wwe_master_page_alter(&$page) {
  $path = current_path();
  // We've to alter the page because the form is rendered after the term's list.
  if ($path == 'admin/structure/taxonomy/venue') {
    $vocabulary = menu_get_object('taxonomy_vocabulary_machine_name', 3);
    if (!empty($vocabulary->machine_name) && $vocabulary->machine_name == 'venue' && !empty($page['content']['system_main']['taxonomy_overview_terms_search'])) {
      array_unshift($page['content'], $page['content']['system_main']['taxonomy_overview_terms_search']);
      unset($page['content']['system_main']['taxonomy_overview_terms_search']);
    }
  }
}

/**
 * Helper function to add an entity translation.
 *
 * @param string $entity_type
 *   Type of entity.
 * @param object $entity
 *   An entity object.
 * @param string $translation_language
 *   Language code to which the entity will be translated.
 */
function wwe_master_add_translation($entity_type, $entity, $translation_language) {
  if (empty($entity_type) || empty($entity) || empty($translation_language)) {
    return;
  }

  $handler = entity_translation_get_handler($entity_type, $entity);
  $translation = array(
    'translate' => 0,
    'status' => 1,
    'language' => $translation_language,
    'source' => $entity->translations->original,
  );
  $handler->setTranslation($translation, array());
  entity_save($entity_type, $entity);
}

/**
 * Get site domain.
 *
 * @param $lang
 *   Language code.
 * @return string
 *   site domain.
 */
function _wwe_master_get_site_domain($lang = 'en') {
  if (getenv('SERVER_ENV') == 'production') {
    // Get production domain.
    return 'https://' . variable_get('wwe_prod_url_' . $lang, 'www.wwe.com');
  }
  else {
    // Get local env domain.
    $language_domains = variable_get('language_domains');
    $domain = !empty($language_domains[$lang]) ? $language_domains[$lang] : 'www.wwe.com';
    return 'https://' . $domain;
  }
  return NULL;
}

/**
 * Try to detect production environment.
 *
 * @param $lang
 * @return bool
 */
function _wwe_master_is_production_site($lang = 'en') {
  $prod = array(
    'en' => 'stage.www.wwe.com',
    'de' => 'stage.de.wwe.com',
    'es' => 'stage.espanol.wwe.com',
  );
  $lang = ($lang == LANGUAGE_NONE) ? 'en' : $lang;
  $language_domains = variable_get('language_domains');
  if (!empty($language_domains[$lang]) && in_array($language_domains[$lang], $prod)) {
    // We are on production environment.
    return TRUE;
  }
  return FALSE;
}



/**
 * Implements hook wwe_master_https_update().
 *
 * Update the change in database tables metatag,page_manager_handlers,panels_pane http string with https sting with serialize data store in DB.
 *
 */
function wwe_master_https_update() {
  $find = "http:";
  $replace = "https:";

  $query_metatag = db_select('metatag','mt')
    ->condition('mt.entity_type','file')
   // ->condition('mt.language','en')
    ->fields('mt', array('entity_id','DATA'))
    ->execute();

  if ($query_metatag->rowCount() > 0) {
    while ($row_metatag = $query_metatag->fetchAssoc()) {
      if (wwe_db_tools_isSerialized($row_metatag['DATA'])) {
        $unserialized = wwe_db_tools_str_replace_json($find,$replace,unserialize($row_metatag['DATA']));
        $serialized = serialize($unserialized);
        db_update('metatag')
          ->fields(array('DATA' => $serialized,))
          ->condition('entity_id',$row_metatag['entity_id'])
          ->execute();
      }
    }
  }

  // Iterate page_manager_handlers results.
  $query_page_manager_handlers = db_select('page_manager_handlers','pm')
    ->fields('pm', array('did','conf'))
    ->execute();

  if ($query_page_manager_handlers->rowCount() > 0) {
    while ($row_page_manager_handlers = $query_page_manager_handlers->fetchAssoc()) {
      if (wwe_db_tools_isSerialized($row_page_manager_handlers['conf'])){
        $unserialized = wwe_db_tools_str_replace_json($find,$replace,unserialize($row_page_manager_handlers['conf']));
        $serialized = serialize($unserialized);
        db_update('page_manager_handlers')
          ->fields(array('conf' => $serialized,))
          ->condition('did', $row_page_manager_handlers['did'])
          ->execute();
      }
    }
  }

  // Iterate panels_pane results.
  $pid_array = array('242','303','450','500','510','535','559','560','561','562','572','585');
  $query_panels_pane = db_select('panels_pane','pp')
    ->condition('pid',$pid_array,'IN')
    ->fields('pp', array('pid','configuration'))
    ->execute();

  if ($query_panels_pane->rowCount() > 0) {
    while ($row_panels_pane = $query_panels_pane->fetchAssoc()) {
      if (wwe_db_tools_isSerialized($row_panels_pane['configuration'])){
        $unserialized = wwe_db_tools_str_replace_json($find,$replace,unserialize($row_panels_pane['configuration']));
        $serialized = serialize($unserialized);
        db_update('panels_pane')
          ->fields(array('configuration' => $serialized,))
          ->condition('pid', $row_panels_pane['pid'])
          ->execute();
      }
    }
  }

}

/**
 * Implements hook wwe_master_https_variable_update().
 *
 * Update the change in database tables variable http string with https string with serialize data store in DB.
 *
 */
function wwe_master_https_variable_update() {
  $find_mobile = "http://www.wwe.com/mobile";
  $replace_mobile = "/mobile";
  $find_network = "http://www.wwe.com/wwenetwork";
  $replace_network = "/wwenetwork";
  $find_howtowatch = "http://www.wwe.com/howtowatch";
  $replace_howtowatch = "/howtowatch";
  $find_network_url_redirect_01 = "http://wwe.com/wwenetwork/cena";
  $replace_network_url_redirect_01 = "/wwenetwork/cena";


  $vid_array = array('wwe_network_app_link','wwe_network_howtowatch','wwe_network_link','network_url_redirect_01');
  $query_variable= db_select('variable','v')
    ->condition('name',$vid_array,'IN')
    ->fields('v', array('name','value'))
    ->execute();

  if ($query_variable->rowCount() > 0) {
    while ($row_variable= $query_variable->fetchAssoc()) {
      if (wwe_db_tools_isSerialized($row_variable['value'])){
        if ($row_variable['name'] == 'wwe_network_app_link') {
          $unserialized = wwe_db_tools_recursive_array_replace($find_mobile,$replace_mobile,unserialize($row_variable['value']));
          $serialized = serialize($unserialized);

          db_update('variable')
            ->fields(array('value' => $serialized,))
            ->condition('name', $row_variable['name'])
            ->execute();
        }
        if ($row_variable['name'] == 'wwe_network_link') {
          $unserialized = wwe_db_tools_recursive_array_replace($find_network,$replace_network,unserialize($row_variable['value']));
          $serialized = serialize($unserialized);

          db_update('variable')
            ->fields(array('value' => $serialized,))
            ->condition('name', $row_variable['name'])
            ->execute();
        }
        if ($row_variable['name'] == 'wwe_network_howtowatch') {
          $unserialized = wwe_db_tools_recursive_array_replace($find_howtowatch,$replace_howtowatch,unserialize($row_variable['value']));
          $serialized = serialize($unserialized);

          db_update('variable')
            ->fields(array('value' => $serialized,))
            ->condition('name', $row_variable['name'])
            ->execute();
        }
        if ($row_variable['name'] == 'network_url_redirect_01') {
          $unserialized = wwe_db_tools_recursive_array_replace($find_network_url_redirect_01,$replace_network_url_redirect_01,unserialize($row_variable['value']));
          $serialized = serialize($unserialized);

          db_update('variable')
            ->fields(array('value' => $serialized,))
            ->condition('name', $row_variable['name'])
            ->execute();
        }
      }
    }
  }
}


function wwe_db_tools_recursive_array_replace($find, $replace, $data) {
  if (is_array($data)) {
    foreach ($data as $key => $value) {
      if (is_array($value)) {
        wwe_db_tools_recursive_array_replace($find, $replace, $data[$key]);
      } else {
        if (is_string($value)) $data[$key] = str_replace($find, $replace, $value);// have to check if it's string to ensure no switching to string for booleans/numbers/nulls
      }
    }
  } else {
    if (is_string($data)) $data = str_replace($find, $replace, $data);
  }
  return $data;
}

function wwe_db_tools_isSerialized($str) {
  return ($str == serialize(false) || @unserialize($str) !== false);
}

function wwe_db_tools_str_replace_json($search,$replace,$subject) {
  return json_decode(str_replace($search, $replace,json_encode($subject)),TRUE);
}

function wwe_master_node_form_validate($form, &$form_state) {
}

/**
 * Validate function for an autocomplete deluxe field which supports country
 *   groups, placed on a widget.
 *
 * Similar to taxonomy_autocomplete_validate().
 *
 * @param type $element
 * @param type $form_state
 */
function _wwe_master_panel_widget_autocomplete_deluxe_field_country_groups_validate($element, &$form_state) {
  $value = '';
  if ($tags = $element['#value']) {
    // Translate term names into actual terms.
    $typed_terms = drupal_explode_tags($tags);
    foreach ($typed_terms as $typed_term) {
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, disregard the value.
      if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($typed_term), 'vid' => 25))) {
        $term = array_pop($possibilities);
        $value[] = $term;
      }
    }
    $value = autocomplete_deluxe_taxonomy_implode_tags($value);
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Get the latest published node from a list of nodes, saved on a variable on an
 * admin form, where the field uses the Media Browser widget.
 *
 * @param string $var_name
 *   A Drupal variable name.
 *
 * @return boolean
 */
function wwe_master_get_last_published_node_from_var($var_name = NULL) {
  if (empty($var_name)) {
    return FALSE;
  }

  // Initialize vars.
  $nids = array();
  $nodes = array();
  $last_published_nid = 0;
  $last_published_ts = 0;

  // Get and load the nodes stored in the var.
  $nids_raw = variable_get($var_name, array());
  if (!empty($nids_raw)) {
    foreach ($nids_raw[LANGUAGE_NONE] as $nid_raw) {
      $nids[] = $nid_raw['target_id'];
    }
    $nodes = node_load_multiple($nids);
  }

  // Get the latest published node.
  foreach ($nodes as $node) {
    if ($node->status) {
      if ($node->created > $last_published_ts) {
        $last_published_ts = $node->created;
        $last_published_nid = $node->nid;
      }
    }
  }

  // Return.
  if (!empty($last_published_nid)) {
    return $last_published_nid;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to get a node's status.
 *
 * @param object $node
 *   A node object.
 *
 * @return boolean
 *   The node status.
 */
function wwe_master_get_node_status($node) {
  if (!empty($node) && is_object($node)) {
    return $node->status;
  }

  return FALSE;
}
