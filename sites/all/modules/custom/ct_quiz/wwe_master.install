<?php
/**
 * @file
 * Install declarations for wwe_master.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site.
 */
function wwe_master_install() {
  // Run the first update hooks upon install.
  for ($i = 7000; $i < 7010; $i++) {
    $candidate = 'wwe_master_update_' . $i;
    if (function_exists($candidate)) {
      $candidate();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function wwe_master_uninstall() {
  $vocab = taxonomy_vocabulary_machine_name_load('wwe_shop_queries');
  taxonomy_vocabulary_delete($vocab->vid);
}

/**
 * Implements hook_schema().
 */
function wwe_master_schema() {
  // Store hashes for each uploaded file.
  $schema['file_md5'] = [
    'description' => 'Store hashes for each uploaded file.',
    'fields' => [
      'fid' => [
        'description' => 'Primary key: {file_managed}.fid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'md5' => [
        'description' => 'MD5 hash for this file.',
        'type' => 'char',
        'length' => 32,
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['fid'],
    'indexes' => [
      'md5_idx' => ['md5'],
    ],
    'foreign keys' => [
      'fid' => [
        'table' => 'file_managed',
        'columns' => ['fid' => 'fid'],
      ],
    ],
  ];

  return $schema;
}

/**
 * WWE-56 Install some base modules.
 *
 * @author Nate Andersen
 */
function wwe_master_update_7000() {
  $modules = [
    'ctools',
    'entity',
    'title',
    'token',
    'panels',
    'panels_mini',
    'panels_ipe',
    'page_manager',
    'date',
    'date_popup',
    'views',
    'views_ui',
    'views_content',
    'i18n',
    'pathauto',
    'pathauto_i18n',
    'redirect',
    'jquery_update',
    'cdn',
    'entityreference',
    'plupload',
    'field_group',
    'variable',
    'i18n_variable',
    'rules',
    'rules_admin',
    'stage_file_proxy',
    'libraries',
    'stringoverrides',
    'views_bulk_operations',
    'field_sql_norevisions',
    'entity_translation',
    'link',
    'hook_post_action',
  ];
  module_enable($modules, TRUE);
}

/**
 * Implements hook_update_N().
 */
function wwe_master_update_7001() {
  variable_set('theme_default', 'wwe_theme');
  variable_set('admin_theme', 'adminimal');
}

/**
 * WWE-34 install file entity fe_photo.
 *
 * @author Nate Andersen
 */
function wwe_master_update_7002() {
  module_enable(['wwe_cti'], TRUE);
}

/**
 * WWE-61 Enable and disable some modules.
 *
 * @author Nate Andersen
 */
function wwe_master_update_7003() {
  module_enable(['admin_menu', 'environment_indicator', 'syslog'], TRUE);
  module_disable(['overlay', 'dblog', 'toolbar'], TRUE);
}

/**
 * WWE-61 Configure Environment Indicator.
 *
 * @author Nate Andersen
 */
function wwe_master_update_7004() {

  ctools_include('export');

  $environment = new stdClass();
  $environment->disabled = FALSE; /* Edit this to true to make a default environment disabled initially */
  $environment->api_version = 1;
  $environment->machine = 'dev';
  $environment->name = 'dev';
  $environment->regexurl = 'dev.wwe.codeandtheory.net';
  $environment->settings = [
    'color' => '#0c7173',
    'text_color' => '#ffffff',
    'weight' => '',
    'position' => 'top',
    'fixed' => 0,
  ];

  ctools_export_crud_save('environment_indicator_environment', $environment);

  $environment = new stdClass();
  $environment->disabled = FALSE; /* Edit this to true to make a default environment disabled initially */
  $environment->api_version = 1;
  $environment->machine = 'local_dev';
  $environment->name = 'local dev';
  $environment->regexurl = 'wwe.dev';
  $environment->settings = [
    'color' => '#406344',
    'text_color' => '#ffffff',
    'weight' => '',
    'position' => 'top',
    'fixed' => 0,
  ];

  ctools_export_crud_save('environment_indicator_environment', $environment);

  if (module_exists('admin_menu')) {
    // Clear admin menu caches.
    admin_menu_flush_caches();
  }

}

/**
 * WWE-3 wwe_media_browser install.
 */
function wwe_master_update_7005() {
  module_enable(['wwe_media_browser'], TRUE);
}

/**
 * WWE-34 Move wwe_fe_photo module location.
 */
function wwe_master_update_7006() {
  db_query("UPDATE {system} set filename = 'sites/all/modules/custom/wwe_fe_photo/wwe_fe_photo.module' WHERE name = 'wwe_fe_photo'");
}

/**
 * WWE-68 Add talent content type.
 */
function wwe_master_update_7007() {
  module_enable(['wwe_content_type_talent'], TRUE);
}

/**
 * WWE-84 Add highlight videos panel pane.
 */
function wwe_master_update_7008() {
  module_enable(['wwe_highlight_videos'], TRUE);
}

/**
 * WWE-69 Adds social media module.
 */
function wwe_master_update_7009() {
  module_enable(['wwe_social_media'], TRUE);
}

/**
 * WWE-97 Enable custom panel pane modules for header.
 */
function wwe_master_update_7010() {
  $modules = [
    'wwe_network_pane',
    'wwe_signin_pane',
  ];
  module_enable($modules, TRUE);
}

/**
 * WWE-98 Enables language_domains module.
 */
function wwe_master_update_7011() {
  module_enable(['language_domains'], TRUE);
}

/**
 * WWE-98 Enables custom language switcher module.
 */
function wwe_master_update_7012() {
  module_enable(['wwe_language_switcher'], TRUE);
}

/**
 * WWE-99 Enable admin_views.
 */
function wwe_master_update_7013() {
  module_enable(['admin_views'], TRUE);
}

/**
 * WWE-90 Enables mc_logger module.
 */
function wwe_master_update_7014() {
  module_enable(['mc_logger']);
}

/**
 * WWE-55 Configure CDN module.
 */
function wwe_master_update_7015() {
  $basic = "http://qa.i.wwe9.com|.jpg .gif .png .jpeg
http://qa.i.wwe9.com|.jpg .gif .png .jpeg
http://i.www9.njtyr1.wwe.com|.jpg .gif .png .jpeg
http://i.www9.njtyr2.wwe.com|.jpg .gif .png .jpeg
http://i.www9.njtyr3.wwe.com|.jpg .gif .png .jpeg
http://qa.wweglobal.i.wwe9.wwe.com|.jpg .gif .png .jpeg
http://qa.bkup-wweglobal.i.wwe9.wwe.com|.jpg .gif .png .jpeg
http://i.glbl-candt.jenkins.wwe.com|.jpg .gif .png .jpeg";

  $secure = "https://qa.i.wwe9.com|.jpg .gif .png .jpeg
https://qa.i.wwe9.com|.jpg .gif .png .jpeg
https://i.www9.njtyr1.wwe.com|.jpg .gif .png .jpeg
https://i.www9.njtyr2.wwe.com|.jpg .gif .png .jpeg
https://i.www9.njtyr3.wwe.com|.jpg .gif .png .jpeg
https://qa.wweglobal.i.wwe9.wwe.com|.jpg .gif .png .jpeg
https://qa.bkup-wweglobal.i.wwe9.wwe.com|.jpg .gif .png .jpeg
https://i.glbl-candt.jenkins.wwe.com|.jpg .gif .png .jpeg";

  variable_set('cdn_basic_mapping', $basic);
  variable_set('cdn_basic_mapping_https', $secure);
  variable_set('cdn_https_support', 1);
  variable_set('cdn_mode', 'basic');
  // Disable initially.
  variable_set('cdn_status', 0);
}

/**
 * WWE-41 Enables imagefield_focus module.
 */
function wwe_master_update_7016() {
  module_enable(['imagefield_focus', 'imgfocus_file_entity']);
}

/**
 * WWE-139 Enable metatag module.
 */
function wwe_master_update_7017() {
  module_enable(['metatag', 'metatag_panels'], TRUE);
}

/**
 * WWE-139 Enable metatag_opengraph module.
 */
function wwe_master_update_7018() {
  module_enable(['metatag_opengraph', 'metatag_twitter_cards'], TRUE);
}

/**
 * WWE-137 Enable wwe_pane_killer to globally disable panes.
 */
function wwe_master_update_7019() {
  module_enable(['wwe_pane_killer'], TRUE);
}

/**
 * WWE-154 Enable wwe_feed_cards module.
 */
function wwe_master_update_7020() {
  module_enable(['wwe_feed_cards'], TRUE);
}

/**
 * WWE-155 Create custom past episode breaker date format and type.
 */
function wwe_master_update_7021() {
  db_insert('date_formats')
    ->fields([
      'format' => 'F j, Y',
      'type' => 'custom',
      'locked' => 0,
    ])
    ->execute();

  db_insert('date_format_type')
    ->fields([
      'type' => 'past_episode_breaker',
      'title' => 'Past Episode Breaker',
      'locked' => 0,
    ])
    ->execute();

  variable_set('date_format_past_episode_breaker', 'F j, Y');
}

/**
 * WWE-156: Enable CER module.
 */
function wwe_master_update_7022() {
  module_enable([
    'elements',
    'cer',
  ]);
}

/**
 * WWE-242 Enables wwe_episodes_header and create custom date format and type.
 */
function wwe_master_update_7023() {
  module_enable(['wwe_episodes_hub'], TRUE);

  db_insert('date_formats')
    ->fields([
      'format' => 'l, F j',
      'type' => 'custom',
      'locked' => 0,
    ])
    ->execute();

  db_insert('date_format_type')
    ->fields([
      'type' => 'episode_header',
      'title' => 'Episode Header',
      'locked' => 0,
    ])
    ->execute();

  variable_set('date_format_episode_header', 'l, F j');
}

/**
 * WWE-154 Enable wwe_feed_cards module.
 */
function wwe_master_update_7024() {
  module_enable(['flag'], TRUE);
}

/**
 * WWE-281 Enable wwe_events module.
 */
function wwe_master_update_7025() {
  module_enable(['wwe_events'], TRUE);
}

/**
 * WWE-281 Creates custom date format and type for upcoming events.
 */
function wwe_master_update_7026() {
  module_enable(['wwe_episodes_hub'], TRUE);

  db_insert('date_formats')
    ->fields([
      'format' => 'l, F j | g:i A',
      'type' => 'custom',
      'locked' => 0,
    ])
    ->execute();

  db_insert('date_format_type')
    ->fields([
      'type' => 'upcoming_events',
      'title' => 'Upcoming events',
      'locked' => 0,
    ])
    ->execute();

  variable_set('date_format_upcoming_events', 'l, F j | g:i A');
}

/**
 * WWE-302 Removing redundant pane.
 */
function wwe_master_update_7027() {
  $pane_type = 'related_playlists';
  db_query("DELETE from {panels_pane} WHERE type = :pane_type", [':pane_type' => $pane_type]);
  cache_clear_all('ctools_plugin_files:ctools:content_types', 'cache');
}

/**
 * WWE-495 Creates Date or Reign date-time format.
 */
function wwe_master_update_7028() {

  db_insert('date_formats')
    ->fields([
      'format' => 'M j, Y',
      'type' => 'custom',
      'locked' => 0,
    ])
    ->execute();

  db_insert('date_format_type')
    ->fields([
      'type' => 'date_of_reign',
      'title' => 'Date of Reign',
      'locked' => 0,
    ])
    ->execute();

  variable_set('date_format_date_of_reign', 'M j, Y');
}

/**
 * WWE-446 Enable mlpanels module and configure.
 */
function wwe_master_update_7029() {
  module_enable(['mlpanels'], TRUE);
  $settings = [
    "cke_fix" => 1,
    "keep_window" => 0,
    "show_messages" => 0,
    "show_types" => 0,
    "exclude_cct" => "",
  ];
  variable_set('mlpanels_variable_settings', $settings);
}

/**
 * Module moving.
 */
function wwe_master_update_7030() {
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_fe_photo',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_content_type_talent',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_episodes_hub',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'mc_logger',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_events',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_highlight_videos',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_shows_hub',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_network_pane',
  ]);
  db_query("DELETE from {system} WHERE name=:name", [
    ':name' => 'wwe_network_schedule',
  ]);

  $network_vars = [
    'wwe_network_start_time',
    'wwe_network_full_schedule_link',
    'wwe_network_default_image',
    'wwe_network_special_event_override',
    'wwe_network_feed_url',
    'wwe_network_max_shows',
  ];
  foreach ($network_vars as $var) {
    $orig = str_replace('wwe_network', 'wwe_network_schedule', $var);
    variable_set($var, variable_get($orig, ''));
    variable_del($orig);
  }

  module_enable([
    'ct_talent',
    'ct_event',
    'fe_photo',
    'wwe_network',
  ]);
  registry_rebuild();
}

/**
 * WWE-495: Enable hook_post_action module.
 */
function wwe_master_update_7031() {
  module_enable(['hook_post_action'], TRUE);
}

/**
 * Uninstall mlpanels. Was breaking media browser functionality.
 */
function wwe_master_update_7032() {
  module_disable(['mlpanels']);
}

/**
 * Reinstall mlpanels. Fix in place.
 */
function wwe_master_update_7033() {
  module_enable(['mlpanels']);
}

/**
 * Install scheduler.
 */
function wwe_master_update_7034() {
  module_enable(['scheduler']);

  $content_types = ['article', 'gallery', 'video', 'event'];

  foreach ($content_types as $ct) {
    variable_set("scheduler_expand_fieldset_$ct", 0);
    variable_set("scheduler_publish_enable_$ct", 1);
    variable_set("scheduler_publish_past_date_$ct", "error");
    variable_set("scheduler_publish_required_$ct", 0);
    variable_set("scheduler_publish_revision_$ct", 0);
    variable_set("scheduler_publish_touch_$ct", 1);
    variable_set("scheduler_unpublish_enable_$ct", 0);
    variable_set("scheduler_unpublish_required_$ct", 0);
    variable_set("scheduler_unpublish_revision_$ct", 0);
    variable_set("scheduler_use_vertical_tabs_$ct", "1");
  }
}

/**
 * WWE-684: Enable ct_match module.
 */
function wwe_master_update_7035() {
  module_enable(['ct_match'], TRUE);
}

/**
 * WWE-696 Create custom date format for match articles.
 */
function wwe_master_update_7036() {
  db_insert('date_format_type')
    ->fields([
      'type' => 'month_day_year',
      'title' => 'Month, Day Year',
      'locked' => 0,
    ])
    ->execute();

  variable_set('date_format_month_day_year', 'F j, Y');
}

/**
 * WWE-631 Update field caption to be translatable (used on files).
 */
function wwe_master_update_7037() {
  $data = 'a:7:{s:12:"entity_types";a:0:{}s:7:"indexes";a:1:{s:6:"format";a:1:{i:0;s:6:"format";}}s:8:"settings";a:1:{s:23:"entity_translation_sync";b:0;}s:12:"translatable";s:1:"1";s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:24:"field_data_field_caption";a:2:{s:5:"value";s:19:"field_caption_value";s:6:"format";s:20:"field_caption_format";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:28:"field_revision_field_caption";a:2:{s:5:"value";s:19:"field_caption_value";s:6:"format";s:20:"field_caption_format";}}}}}s:12:"foreign keys";a:1:{s:6:"format";a:2:{s:5:"table";s:13:"filter_format";s:7:"columns";a:1:{s:6:"format";s:6:"format";}}}s:2:"id";s:1:"7";}';
  db_query("UPDATE {field_config} set data = :field_data, translatable = 1 WHERE field_name = 'field_caption'", [':field_data' => $data]);
}

/**
 * WWE-722: Enable ct_match module.
 */
function wwe_master_update_7038() {
  module_enable(['ct_article'], TRUE);
}

/**
 * WWE-631: Enable wwe_quickedit module.
 */
function wwe_master_update_7039() {
  module_enable(['wwe_quickedit'], TRUE);
}

/**
 * Delete old episode panes, to be updated.
 */
function wwe_master_update_7040() {

  db_query("DELETE from {panels_pane} WHERE type IN ('epidsode_preview_cards_pane', 'episode_standard_live_cards_pane', 'special_live_cards', 'standard_results_cards', 'special_results_cards')");

  cache_clear_all('ctools_plugin_files:ctools:content_types', 'cache');
}

/**
 * Delete talent_news_feed pane, will now use feed_cards_pane.
 */
function wwe_master_update_7041() {

  db_query("DELETE from {panels_pane} WHERE type IN ('talent_news_feed')");

  cache_clear_all('ctools_plugin_files:ctools:content_types', 'cache');
}

/**
 * WWE-251: Enable ckeditor, entity_embed and wwe_embed modules.
 */
function wwe_master_update_7042() {
  $modules = [
    'ckeditor',
    'entity_embed',
    'wwe_embed',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-822: Enable search module.
 */
function wwe_master_update_7043() {
  $modules = [
    'wwe_search',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-675: Enable analytics module.
 */
function wwe_master_update_7044() {
  $modules = [
    'wwe_analytics',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-644: Enable ct_match.
 */
function wwe_master_update_7045() {
  $modules = [
    'ct_match',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-806: Enable Sub-pathauto module.
 */
function wwe_master_update_7046() {
  $modules = [
    'subpathauto',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-896 Adding new caching table for media browser options.
 */
function wwe_master_update_7047() {
  $schema = module_invoke('wwe_media_browser', 'schema');
  db_create_table('cache_media_browser', $schema['cache_media_browser']);
}

/**
 * WWE-832: Enable ct_link module.
 */
function wwe_master_update_7048() {
  $modules = [
    'ct_link',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-872: Enable wwe_ads and dependencies.
 */
function wwe_master_update_7049() {
  module_enable([
    'browserclass',
    'dfp',
    'wwe_ads',
  ]);
}

/**
 * WWE-731: Enables entityreference_autocomplete module.
 */
function wwe_master_update_7050() {
  module_enable([
    'entityreference_autocomplete',
  ]);
}

/**
 * WWE-1079: Enable wwe_cache module.
 */
function wwe_master_update_7051() {
  $modules = [
    'wwe_cache',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-811: Enable wwe_cache_flush module.
 */
function wwe_master_update_7052() {
  $modules = [
    'wwe_cache_flush',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1079: Disable wwe_cache module.
 */
function wwe_master_update_7053() {
  $modules = [
    'wwe_cache',
  ];
  module_disable($modules, TRUE);
}

/**
 * WWE-330: Enable content_lock module.
 */
function wwe_master_update_7054() {
  $modules = [
    'content_lock',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-896 Adding new caching table for superstar search api.
 */
function wwe_master_update_7055() {
  $schema = module_invoke('ct_talent', 'schema');
  db_create_table('cache_superstar_search', $schema['cache_superstar_search']);
}

/**
 * WWE-1039: Remap unnecessary roles to Read-Only.
 *
 * Deprecated role assignments are as follows:
 * 6 = Design Team
 * 8 = VIP
 * 11 = Magazine
 * 13 = Marketing
 * 14 = Type Converter
 * 16 = WWE Shop
 * 17 = Wwe-De.
 */
function wwe_master_update_7056() {

  // These are the role rids to migrate.
  $old_rids = [6, 8, 11, 13, 14, 16, 17];

  // Create an array of read-only uids to cross-check against.
  $result_readonly = db_select('users_roles', 'r')
    ->distinct()
    ->fields('r', ['uid'])
    ->condition('rid', 15)
    ->execute();

  $read_array = [];

  while ($read_record = $result_readonly->fetchField()) {
    $read_array[] = $read_record;
  }

  // Create an array of uids with the migrating roles.
  $result_userrole = db_select('users_roles', 'r')
    ->distinct()
    ->fields('r', ['uid'])
    ->condition('rid', $old_rids, 'IN')
    ->execute();

  $role_array = [];

  // Make sure we don't duplicate any rids that already have read-only.
  while ($role_record = $result_userrole->fetchField()) {
    if (!in_array($role_record, $read_array)) {
      $role_array[] = ['uid' => $role_record, 'rid' => 15];
    }
  }

  // Assign uids with migrated roles to read-only.
  if (!empty($role_array)) {
    $query = db_insert('users_roles')->fields(['uid', 'rid']);
    foreach ($role_array as $index => $record) {
      $query->values($record);
    }
    $query->execute();
  }

  // Delete migrated role user assignments.
  $rid_delete = db_delete('users_roles')
    ->condition('rid', $old_rids, 'IN')
    ->execute();

  // Delete migrated roles.
  $role_delete = db_delete('role')
    ->condition('rid', $old_rids, 'IN')
    ->execute();
}

/**
 * WWE-1056: Enable wwe_blockquote module.
 */
function wwe_master_update_7057() {
  $modules = [
    'wwe_blockquote',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1079: Enable wwe_cache module.
 */
function wwe_master_update_7058() {
  $modules = [
    'wwe_cache',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1027 Create legacy image fields on Talent.
 *
 * @author Chris Morris
 */
function wwe_master_update_7059() {

  // Create an array of fields since only one bundle here.
  $image_field_array = [
    'field_legacy_primary_image',
    'field_legacy_talent_head_shot',
    'field_legacy_skin_image',
    'field_legacy_talent_profile',
    'field_legacy_shield_image',
  ];

  // Retrieve the node bundles from the database.
  $entity_info = entity_get_info('node');
  foreach ($entity_info['bundles'] as $bundle_system_name => $bundle) {
    $entity_bundles[$bundle_system_name] = $bundle['label'];
  }

  // Check to see that the bundle exists.
  if (array_key_exists('talent', $entity_bundles)) {

    // Create the fieldgroup object.
    $group = (object) [
      'identifier' => 'group_legacy_images|node|talent|form',
      'group_name' => 'group_legacy_images',
      'entity_type' => 'node',
      'bundle' => 'talent',
      'mode' => 'form',
      'label' => 'Legacy Images',
      'children' => [],
      'weight' => '10',
      'format_type' => 'tab',
      'format_settings' => [
        'instance_settings' => [
          'tab' => 'closed',
          'description' => '',
          'classes' => '',
          'required_fields' => 1,
        ],
      ],
    ];
    field_group_group_save($group);

    // Retrieve an array of fieldgroups.
    $groups = field_group_read_groups([
      'entity_type' => 'node',
      'bundle' => 'talent',
      'view_mode' => 'form',
    ]);

    // Define the group object to alter so we can add the fields.
    $legacy_images_group = $groups['node']['talent']['form']['group_legacy_images'];

    // Loop through the fields we are going to create.
    foreach ($image_field_array as $image_field) {

      // Field names are the machine names without the starting field_
      // part of the string.
      $field_name = ucwords(str_replace('_', ' ', str_replace('field_', '', $image_field)));

      // Initialize the array and create the field.
      $field = [
        'field_name' => $image_field,
        'type' => 'image',
      ];

      field_create_field($field);

      // Assign the field to the bundle.
      $instance = [
        'field_name' => $field['field_name'],
        'entity_type' => 'node',
        'bundle' => 'talent',
        'label' => $field_name,
      ];

      field_create_instance($instance);

      // Add the field to the object while in the loop.
      $legacy_images_group->children[] = $field['field_name'];
    }

    field_group_group_save($legacy_images_group);

  }
}

/**
 * WWE-1024 Old fields required by Sapphire feeds.
 *
 * @author Chris Morris
 */
function wwe_master_update_7060() {

  // Retrieve the node bundles from the database.
  $entity_info = entity_get_info('node');
  foreach ($entity_info['bundles'] as $bundle_system_name => $bundle) {
    $entity_bundles[$bundle_system_name] = $bundle['label'];
  }

  // Create field_network_icon field since all 3 bundles need it.
  $field_network_icon = [
    'field_name' => 'field_network_icon',
    'type' => 'list_boolean',
  ];

  field_create_field($field_network_icon);

  // Check that the bundle exists.
  if (array_key_exists('article', $entity_bundles)) {

    // Set up and create the instance for the article bundle.
    $article_network_icon = [
      'field_name' => 'field_network_icon',
      'entity_type' => 'node',
      'bundle' => 'article',
      'label' => 'Field Network Icon',
    ];

    field_create_instance($article_network_icon);

  }

  if (array_key_exists('video', $entity_bundles)) {

    // Some fields are exclusive to the bundle.
    $field_video_brightcove_id = [
      'field_name' => 'field_video_brightcove_id',
      'type' => 'text',
    ];

    field_create_field($field_video_brightcove_id);

    $video_video_brightcove_id = [
      'field_name' => 'field_video_brightcove_id',
      'entity_type' => 'node',
      'bundle' => 'video',
      'label' => 'Video Brightcove ID',
    ];

    field_create_instance($video_video_brightcove_id);

    // Reuses the field we made at the top of the function.
    $video_network_icon = [
      'field_name' => 'field_network_icon',
      'entity_type' => 'node',
      'bundle' => 'video',
      'label' => 'Field Network Icon',
    ];

    field_create_instance($video_network_icon);

    $field_is_network_content = [
      'field_name' => 'field_is_network_content',
      'type' => 'list_boolean',
    ];

    field_create_field($field_is_network_content);

    $video_is_network_content = [
      'field_name' => 'field_is_network_content',
      'entity_type' => 'node',
      'bundle' => 'video',
      'label' => 'Is Network Content',
    ];

    field_create_instance($video_is_network_content);

  }

  if (array_key_exists('gallery', $entity_bundles)) {

    $gallery_network_icon = [
      'field_name' => 'field_network_icon',
      'entity_type' => 'node',
      'bundle' => 'gallery',
      'label' => 'Field Network Icon',
    ];

    field_create_instance($gallery_network_icon);

  }
}

/**
 * WWE-1061: Enable wwe_fieldscheduler module.
 */
function wwe_master_update_7061() {
  $modules = [
    'wwe_fieldscheduler',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-965: Enable wwe_geo_shared_widget module.
 */
function wwe_master_update_7062() {
  $modules = [
    'wwe_geo_shared_widget',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1037: Enables wwe_search_gsa module.
 */
function wwe_master_update_7063() {
  $modules = [
    'wwe_search_gsa',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1212: Creates new vocabulary called "WWE Shop Queries".
 */
function wwe_master_update_7064() {
  $new_vocab = (object) [
    'name' => 'WWE Shop Queries',
    'description' => 'Feedonomics Shop API queries',
    'machine_name' => 'wwe_shop_queries',
  ];
  taxonomy_vocabulary_save($new_vocab);
}

/**
 * WWE-1212: Creates field field_shop_query.
 */
function wwe_master_update_7065() {
  if (field_info_field('field_shop_query') == FALSE) {
    $field = [
      'field_name' => 'field_shop_query',
      'type' => 'text',
    ];

    field_create_field($field);
  }
}

/**
 * WWE-1212: Adds field to vocabulary "WWE Shop Queries".
 */
function wwe_master_update_7066() {
  $instance = [
    'field_name' => 'field_shop_query',
    'entity_type' => 'taxonomy_term',
    'bundle' => 'wwe_shop_queries',
    'label' => 'Query',
    'description' => 'The shop query to be used.',
    'required' => TRUE,
  ];

  field_create_instance($instance);
}

/**
 * WWE-1065: Enables wwe_admin module.
 */
function wwe_master_update_7067() {
  $modules = [
    'wwe_admin',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1100: Enables google_appliance_suggest and gd_infinite_scroll modules.
 */
function wwe_master_update_7068() {
  $modules = [
    'google_appliance_suggest',
    'gd_infinite_scroll',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1100: Updating gd_infinite_scroll admin settings.
 */
function wwe_master_update_7069() {
  if (module_exists('gd_infinite_scroll')) {
    $name = 'ga_search';
    $url = 'search/*';
    $settings = [];
    $settings['pager_selector'] = 'ul.pager';
    $settings['next_selector'] = 'li.pager__item--next a';
    $settings['content_selector'] = '.google-appliance-results';
    $settings['items_selector'] = '.google-appliance-result';

    gd_infinite_scroll_settings_save($name, $url, $settings);
  }
}

/**
 * WWE-1100: Updating google_appliance_suggest admin settings.
 */
function wwe_master_update_7070() {
  if (module_exists('google_appliance_suggest')) {
    variable_set('google_appliance_suggest_hide_throbber', FALSE);
    variable_set('google_appliance_suggest_cache', TRUE);
    variable_set('google_appliance_suggest_max', '10');
  }
}

/**
 * WWE-1100: Updating google_appliance_suggest admin settings.
 */
function wwe_master_update_7071() {
  if (module_exists('google_appliance_suggest')) {
    variable_set('google_appliance_suggest_hide_throbber', TRUE);
  }
}

/**
 * WWE-1502: Corrects fieldset params.
 */
function wwe_master_update_7072() {
  // Build an array of the field group needed.
  $groups = field_group_read_groups([
    'entity_type' => 'node',
    'bundle' => 'talent',
    'view_mode' => 'form',
  ]);
  $legacy_images_group = $groups['node']['talent']['form']['group_legacy_images'];

  // Change the settings to correct and save.
  $legacy_images_group->format_settings['formatter'] = 'closed';
  unset($legacy_images_group->format_settings['instance_settings']['tab']);
  field_group_group_save($legacy_images_group);
}

/**
 * WWE-1414: Move wwe-breakpoints.js so it is loaded before all other custom js.
 */
function wwe_master_update_7073() {
  // Build an array of the field group needed.
  $modules = [
    'wwe_init',
  ];

  module_enable($modules, TRUE);

  db_query("UPDATE system set weight = -1 where name = 'wwe_init'");
}

/**
 * WWE-1003: Enables wwe_feed and wwe_api modules.
 */
function wwe_master_update_7074() {
  $modules = [
    'wwe_api',
    'wwe_feed',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-751: Enable file_admin module.
 */
function wwe_master_update_7075() {
  $modules = [
    'file_admin',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1154: Enable termstatus module.
 */
function wwe_master_update_7076() {
  $modules = [
    'termstatus',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-989: Enable wwe_shop module.
 */
function wwe_master_update_7077() {
  $modules = [
    'wwe_shop',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1500: Remove Built-in interface translation strings from locales_target.
 */
function wwe_master_update_7078() {
  $delete_rows = db_query("DELETE t FROM {locales_target} AS t LEFT JOIN {locales_source} AS s ON t.lid = s.lid WHERE textgroup='default'");
}

/**
 * WWE-1182: Enable webform module.
 */
function wwe_master_update_7079() {
  $modules = [
    'webform',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1533: Enable the wwe_sitemap custom and xmlsitemap contrib moudles.
 */
function wwe_master_update_7080() {
  $modules = [
    'xmlsitemap',
    'xmlsitemap_i18n',
    'xmlsitemap_menu',
    'xmlsitemap_node',
    'xmlsitemap_taxonomy',
    'wwe_sitemap',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-998: Enable the ct_poll custom and paragraphs contrib modules.
 */
function wwe_master_update_7081() {
  $modules = [
    'paragraphs',
    'ct_poll',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1087: Enable the ct_link.
 */
function wwe_master_update_7082() {
  $modules = [
    'ct_link',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1058: Change field_primary_date timezone handling.
 */
function wwe_master_update_7083() {
  // Adding timezone and offset columns the field table.
  $timezone = [
    'type' => 'varchar',
    'length' => 50,
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => FALSE,
  ];
  $offset = [
    'type' => 'int',
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => FALSE,
  ];
  db_add_field('field_data_field_primary_date', 'field_primary_date_timezone', $timezone);
  db_add_field('field_data_field_primary_date', 'field_primary_date_offset', $offset);
  db_add_field('field_revision_field_primary_date', 'field_primary_date_timezone', $timezone);
  db_add_field('field_revision_field_primary_date', 'field_primary_date_offset', $offset);

  // Update field config record by fetching, changing and saving.
  $query = db_query('Select data from {field_config} where field_name = :name', [':name' => 'field_primary_date']);
  $settings_array = unserialize($query->fetchField());
  // Change timezone handling.
  $settings_array['settings']['tz_handling'] = 'date';
  $settings_array['settings']['timezone_db'] = 'America/New_York';
  // Change storage settings.
  $settings_array['storage']['details']['sql']['FIELD_LOAD_CURRENT']['field_data_field_primary_date'] = [
    'value' => 'field_primary_date_value',
    'timezone' => 'field_primary_date_timezone',
    'offset' => 'field_primary_date_offset',
  ];
  $settings_array['storage']['details']['sql']['FIELD_LOAD_REVISION']['field_revision_field_primary_date'] = [
    'value' => 'field_primary_date_value',
    'timezone' => 'field_primary_date_timezone',
    'offset' => 'field_primary_date_offset',
  ];

  db_update('field_config')
    ->fields(['data' => serialize($settings_array)])
    ->condition('field_name', 'field_primary_date')
    ->execute();

  // Set all timezone values.
  db_update('field_data_field_primary_date')
    ->fields(['field_primary_date_timezone' => 'America/New_York'])
    ->execute();

  // Set offset values by calculating appropriate EST or EDT offsets.
  $result = db_query('Select entity_id,language,delta,field_primary_date_value from {field_data_field_primary_date}');

  foreach ($result as $record) {
    // Calculate offset from UTC timestamp and timezone, America/New_York.
    $timestamp = $record->field_primary_date_value;
    $string = date('Y-m-d\TH:i:s', $timestamp);
    $date_time_zone = new DateTimeZone('America/New_York');
    $date_time = new DateTime($string, $date_time_zone);
    $offset = timezone_offset_get($date_time_zone, $date_time);

    db_update('field_data_field_primary_date')
      ->fields(['field_primary_date_offset' => $offset])
      ->condition('entity_id', $record->entity_id, '=')
      ->condition('language', $record->language, '=')
      ->condition('delta', $record->delta, '=')
      ->execute();
  }

  // Update all field instances.
  $info = field_info_field('field_primary_date');
  $node_bundles = $info['bundles']['node'];

  foreach ($node_bundles as $bundle) {
    $instance_info = field_info_instance('node', 'field_primary_date', $bundle);
    field_update_instance($instance_info);
  }

  field_flush_caches();
}

/**
 * WWE-994: Enable the contrib module, facebook_comments.
 */
function wwe_master_update_7084() {
  $modules = [
    'facebook_comments',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-994: Disable and uninstall the contrib module, facebook_comments.
 */
function wwe_master_update_7085() {
  $modules = [
    'facebook_comments',
  ];

  module_disable($modules, TRUE);
  drupal_uninstall_modules($modules);
}

/**
 * WWE-994: Enable the contrib module, facebook_comments_block.
 */
function wwe_master_update_7086() {
  $modules = [
    'facebook_comments_block',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1107: Enable the wwe_voting custom module.
 */
function wwe_master_update_7087() {
  $modules = [
    'wwe_voting',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-330: Enable wwe_lock, disable content_lock.
 */
function wwe_master_update_7088() {
  $modules = [
    'wwe_lock',
  ];

  module_enable($modules, TRUE);

  $modules = [
    'content_lock',
  ];

  module_disable($modules);
}

/**
 * WWE-2384: Enable extlink contrib module.
 */
function wwe_master_update_7089() {
  $modules = [
    'extlink',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-2330 enable metatag mobile options.
 */
function wwe_master_update_7090() {
  $modules = [
    'metatag_mobile',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-2433 Create custom date format: Day, Month Date.
 */
function wwe_master_update_7091() {
  db_insert('date_format_type')
    ->fields([
      'type' => 'day_month_date',
      'title' => 'Day, Month Date',
      'locked' => 0,
    ])
    ->execute();

  variable_set('date_format_day_month_date', 'l, F j');
}

/**
 * WWE-2618 enable menut attributes.
 */
function wwe_master_update_7092() {
  $modules = [
    'menu_attributes',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-854 - Use custom token for parent reference to fix bug.
 *
 * Bug fixed where alias isn't available for parent in target language and it
 * returns node/<nid>.
 */
function wwe_master_update_7093() {
  variable_set('pathauto_node_article_pattern', '[node:wwe_master_custom_parent_reference]/article/[node:field_simplename]');
  variable_set('pathauto_node_episode_pattern', '');
  variable_set('pathauto_node_event_pattern', '[node:wwe_master_custom_parent_reference]/event/[node:field_simplename]');
  variable_set('pathauto_node_gallery_pattern', '[node:wwe_master_custom_parent_reference]/gallery/[node:field_simplename]');
  variable_set('pathauto_node_match_pattern', '');
  variable_set('pathauto_node_pattern', '[node:wwe_master_custom_parent_reference]/[node:field_simplename]');
}

/**
 * WWE-2569 Remove overridden changes to image styles.
 *
 * Putting these back in code.
 */
function wwe_master_update_7094() {

  $to_delete = [
    'wwe_16_9_xxs',
    'wwe_16_9_xs',
    'wwe_16_9_s',
    'wwe_16_9_m',
    'wwe_16_9_l',
    'wwe_16_9_xl',
    'wwe_16_9_xl_r',
    'wwe_16_9_xxl',
    'wwe_16_9_full',
    'wwe_1_1_720',
    'talent_champion_s',
    // unused, deleting.
    'test_16x9',
    // unused, deleting.
    'focused_thumbnail_100x100',
    // unused, deleting.
    'wwe_talent_profile',
  ];

  foreach ($to_delete as $style_name) {
    $isid = (int) db_query("select isid FROM {image_styles} WHERE name = :style_name;", [":style_name" => $style_name])->fetchField();

    if ($isid) {
      db_delete('image_effects')->condition('isid', $isid)->execute();
      db_delete('image_styles')->condition('isid', $isid)->execute();
    }

  }
  cache_clear_all('image_styles', 'cache');
  cache_clear_all('image_effects:', 'cache', TRUE);
}

/**
 * WWE-994: Change out commenting.
 */
function wwe_master_update_7095() {
  $modules = [
    'facebook_comments_block',
  ];

  module_disable($modules);
}

/**
 * WWE-2624 enable token tweaks.
 */
function wwe_master_update_7096() {
  $modules = [
    'token_tweaks',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-2358 Enable conflict module with WWE patch.
 */
function wwe_master_update_7097() {
  $modules = [
    'conflict',
  ];

  module_enable($modules, TRUE);

  // Enable conflict module for each node type.
  $types = array_keys(node_type_get_types());
  foreach ($types as $type) {
    variable_set('conflict_enable_' . $type, 1);
  }
}

/**
 * Remove dependency on featured_playlist.
 */
function wwe_master_update_7098() {
  db_query("DELETE from {panels_pane} WHERE type = 'featured_playlist'");
  cache_clear_all('ctools_plugin_files:ctools:content_types', 'cache');
}

/**
 * Enable Imagecache Actions.
 */
function wwe_master_update_7099() {
  $modules = [
    'imagecache_actions',
    'imagecache_canvasactions',
  ];

  module_enable($modules, TRUE);
}

/**
 * Enable Minify JS.
 */
function wwe_master_update_7100() {
  $modules = [
    'advagg',
    'advagg_js_compress',
  ];

  module_enable($modules, TRUE);
}

/**
 * Enable and set settings for Sourcepoint.
 */
function wwe_master_update_7101() {
  module_enable(['wwe_sourcepoint'], TRUE);

  variable_set('wwe_sourcepoint_detection_endpoint', 'https://api.getsentinel.com/script/detection?delivery=script');
  variable_set('wwe_sourcepoint_recovery_endpoint', 'https://api.getsentinel.com/script/recovery?delivery=script');
  variable_set('wwe_sourcepoint_delivery_endpoint', 'https://api.getsentinel.com/script/delivery?delivery=script');
  variable_set('wwe_sourcepoint_api_key', 'WauCVGuHVrfjnEhVeCZEzZFmABzuggghmWrggeUvPixJGNSTIf');
}

/**
 * Enable wwe_auditlog.
 */
function wwe_master_update_7102() {
  $modules = [
    'wwe_auditlog',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-3506 Update superstar search panels pane to set initial category.
 */
function wwe_master_update_7103() {

  $superstar_pane = db_query("SELECT * FROM {panels_pane} WHERE type = 'superstars_search';")->fetchAssoc();

  $configuration = unserialize($superstar_pane['configuration']);

  $initial_category = [
    'entity_id' => 28018004,
    'entity_label' => 'Current Superstars',
    'entity_type' => 'taxonomy_term',
    'entity_bundle' => 'superstar_type',
  ];

  $configuration['initial_category'] = $initial_category;

  foreach ($configuration['mlpanels'] as $lang => $data) {
    $configuration['mlpanels'][$lang]['initial_category'] = $initial_category;
  }

  $query_args = [
    'pid' => $superstar_pane['pid'],
    'did' => $superstar_pane['did'],
    'config' => serialize($configuration),
  ];

  db_query('UPDATE {panels_pane} SET configuration = :config WHERE pid = :pid and did = :did', $query_args);
}

/**
 * WWE-3490: Enable flush_facebook_cache.
 */
function wwe_master_update_7104() {
  $modules = [
    'flush_facebook_cache',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-3490: Enable flush_facebook_rules.
 */
function wwe_master_update_7105() {
  $modules = [
    'flush_facebook_rules',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-3509: Add field instances.
 */
function wwe_master_update_7106() {

  $field_logo = [
    'field_name' => 'field_logo',
    'entity_type' => 'node',
    'bundle' => 'episode',
    'label' => 'WWE Network Logo',
    'widget' => [
      'type' => 'wwe_media_browser_entityreference_browser',
      'weight' => 16,
    ],
  ];

  field_create_instance($field_logo);

  $network_hero_image = [
    'field_name' => 'field_secondary_image',
    'entity_type' => 'node',
    'bundle' => 'episode',
    'label' => 'WWE Network Hero Image',
    'widget' => [
      'type' => 'wwe_media_browser_entityreference_browser',
      'weight' => 17,
    ],
  ];

  field_create_instance($network_hero_image);

  $result = db_query("SELECT * FROM {field_group} WHERE bundle = 'episode' AND group_name = 'group_media' AND id = 21;")->fetchAssoc();

  $data = unserialize($result['data']);

  $to_add = ['field_secondary_image', 'field_logo'];

  foreach ($to_add as $item) {
    if (!in_array($item, $data['children'])) {
      $data['children'][] = $item;
    }
  }

  $new_data = serialize($data);

  $args = [
    ':new_data' => $new_data,
    ':identifier' => $result['identifier'],
  ];

  db_query('UPDATE {field_group} SET data = :new_data WHERE identifier = :identifier', $args);

}

/**
 * WWE-3637: Enable ct_section.
 */
function wwe_master_update_7107() {
  $modules = [
    'ct_section',
  ];

  module_enable($modules, TRUE);
}

/**
 * Adds field_sponsorship to all content types and to field group.
 */
function wwe_master_update_7108() {
  $field_name = 'field_sponsorship';
  $entity_type = 'node';
  if (field_info_field('field_sponsorship') == FALSE) {
    $field = [
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'deleted' => 0,
      'entity_types' => [$entity_type],
      'field_name' => $field_name,
      'foreign keys' => [
        'node' => [
          'columns' => [
            'target_id' => 'nid',
          ],
          'table' => 'node',
        ],
      ],
      'indexes' => [
        'target_id' => [
          0 => 'target_id',
        ],
      ],
      'locked' => 0,
      'module' => 'entityreference',
      'settings' => [
        'handler' => 'base',
        'handler_settings' => [
          'behaviors' => [
            'views-select-list' => [
              'status' => 0,
            ],
          ],
          'sort' => [
            'type' => 'none',
          ],
          'target_bundles' => [
            'link',
          ],
        ],
        'target_type' => $entity_type,
      ],
      'translatable' => 0,
      'type' => 'entityreference',
    ];

    field_create_field($field);
  }

  $content_types = node_type_get_types();
  foreach ($content_types as $content_type) {
    $exclude_types = [
      'reign',
      'social',
    ];
    if (in_array($content_type->type, $exclude_types)) {
      continue;
    }
    $field_data = [
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $content_type->type,
      'label' => 'Sponsor',
      'widget' => [
        'type' => 'wwe_media_browser_entityreference_browser',
      ],
    ];

    field_create_instance($field_data);

    $group_name = 'group_categorization';
    $view_mode = 'form';
    $label = 'Categorization';
    $groups = field_group_read_groups([
      'entity_type' => $entity_type,
      'bundle' => $content_type->type,
      'view_mode' => $view_mode,
    ]);
    $field_group = $groups[$entity_type][$content_type->type][$view_mode][$group_name];
    // If the field group doesn't exist on the content type, create it.
    if (empty($field_group)) {
      $field_group = (object) [
        'identifier' => $group_name . '|' . $entity_type . '|' . $content_type->type . '|' . $view_mode,
        'group_name' => $group_name,
        'entity_type' => $entity_type,
        'bundle' => $content_type->type,
        'mode' => $content_type->type,
        'label' => $label,
        'weight' => '1',
        'children' => [],
        'format_type' => 'tab',
        'format_settings' => [
          'formatter' => 'closed',
          'instance_settings' => [
            'description' => '',
            'classes' => '',
            'required_fields' => 1,
          ],
        ],
      ];
    }
    $field_group->children[] = $field_name;
    field_group_group_save($field_group);
    ctools_include('export');
    ctools_export_crud_enable('field_group', $field_group->identifier);
  }
}

/**
 * Adds Sponsorship to the template_selection vocabulary.
 */
function wwe_master_update_7109() {
  $vocabulary_name = 'template_selection';
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  if (!empty($vocabulary)) {
    $term = new stdClass();
    $term->name = 'Sponsorship';
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
  }
}

/**
 * Enable scheduling functionality for the Link content type.
 */
function wwe_master_update_7110() {
  variable_set('scheduler_publish_enable_link', 1);
  variable_set('scheduler_unpublish_enable_link', 1);
}

/**
 * WWE-3703: Add Outbrain automation values.
 */
function wwe_master_update_7111() {
  $array = [
    'shows/smackdown',
    'shows/totaldivas',
    'shows/wwenxt',
    'shows/wrestlemania',
    'shows/raw',
  ];
  variable_set('wwe_outbrain_automation', implode("\n", $array));
}

/**
 * WWE-3700 Rollback.  Remove ticket changes from current release.
 *
 * @author Nate Andersen
 */
function wwe_master_update_7112() {
  $conf = metatag_config_load('node:video');
  $conf->config['og:video:url']['value'] = '';
  $conf->config['og:video:secure_url']['value'] = '';
  $conf->config['og:video:type']['value'] = '';
  metatag_config_save($conf);
}

/**
 * WWE-3800: Add Outbrain automation values per content type.
 */
function wwe_master_update_7113() {
  $array = [
    'article' => 'article',
  ];
  variable_set('wwe_outbrain_entities', $array);
  // Log the results for prod pushes.
  if (function_exists('drush_log')) {
    drush_log('Outbrain bundle configuration added.', 'ok');
  }

  // Update the Outbrain path to use shows.
  $automate_paths = explode("\n", variable_get('wwe_outbrain_automation', ''));
  $automate_paths[] = 'shows';
  $automate_paths[] = 'new one';
  variable_set('wwe_outbrain_automation', implode("\n", $automate_paths));
  if (function_exists('drush_log')) {
    drush_log('Outbrain path configuration updated.', 'ok');
  }
}

/**
 * WWE-928: Add disable ads field to galleries.
 */
function wwe_master_update_7114() {
  // Check if our field is not already created.
  if (!field_info_field('field_disable_ads')) {
    $field = [
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => [],
      'field_name' => 'field_disable_ads',
      'foreign keys' => [],
      'indexes' => [
        'value' => [
          0 => 'value',
        ],
      ],
      'locked' => '0',
      'module' => 'list',
      'settings' => [
        'allowed_values' => [
          0 => '',
          1 => '',
        ],
        'allowed_values_function' => '',
      ],
      'translatable' => '0',
      'type' => 'list_boolean',
    ];
    field_create_field($field);

    // Create the instance on the bundle.
    $instance = [
      'bundle' => 'gallery',
      'default_value' => [
        0 => [
          'value' => 0,
        ],
      ],
      'deleted' => '0',
      'description' => 'Check the box to hide ads for this gallery.',
      'display' => [
        'default' => [
          'label' => 'above',
          'module' => 'list',
          'settings' => [],
          'type' => 'list_default',
          'weight' => 55,
        ],
        'teaser' => [
          'label' => 'above',
          'settings' => [],
          'type' => 'hidden',
          'weight' => 0,
        ],
      ],
      'entity_type' => 'node',
      'field_name' => 'field_disable_ads',
      'label' => 'Disable ads',
      'required' => 0,
      'settings' => [
        'user_register_form' => FALSE,
      ],
      'widget' => [
        'active' => 1,
        'module' => 'options',
        'settings' => [
          'display_label' => 1,
        ],
        'type' => 'options_onoff',
        'weight' => '12',
      ],
    ];

    field_create_instance($instance);
  }
}

/**
 * WWE-3812 - Update TRUSTe script on the Data Preferences page.
 */
function wwe_master_update_7115() {
  // Load the data preferences node.
  $data_pref_node = node_load(35000510);
  if ($data_pref_node) {
    $node_wrapper = entity_metadata_wrapper('node', $data_pref_node);

    // Updated script per WWE-3812.
    $updated_script = '<iframe id="truste-consent-iframe" width="728" height="500" style="border: 0px;" scrolling="yes"></iframe><div id="1" style="display: none;"></div><script type="text/javascript" src="https://consent.truste.com/notice?domain=wwe.com&c=1"></script><script type="text/javascript" src="https://consent.truste.com/get?name=loadCmDisclosure.js"> </script>';

    // Update the body to the script.
    $node_wrapper->body->set([
      'value' => $updated_script,
      'format' => 'full_html',
    ]);

    // Save the node.
    $node_wrapper->save();
  }
}

/**
 * WWE-1429: Updating field_show_reference to allow multiple selections.
 */
function wwe_master_update_7117() {
  $field = field_info_field('field_show_reference');
  $field['cardinality'] = "-1";
  field_update_field($field);
}

/**
 * WWE-1177: Enable taxonomy_manager.
 */
function wwe_master_update_7118() {
  $modules = [
    'taxonomy_manager',
  ];

  module_enable($modules, TRUE);
}

/**
 * WWE-1177: Enable taxonomy_manager.
 */
function wwe_master_update_7119() {
  $modules = [
    'rules',
  ];

  module_disable($modules, TRUE);
}

/**
 * WWEC-4341: Fix the "module is missing errors" the 7.50
 * update created as seen here https://www.drupal.org/node/2487215
 */
function wwe_master_update_7120() {
  $modules = [
    'infinite_scroll',
    'coder',
    'coder_review',
    'devel',
    'devel_generate',
    'venue_importer',
    'wwe_error_handler',
    'wwe_superstars_hub',
    'wwe_transporter_poc',
  ];
  db_delete('system')
    ->condition('name', $modules, 'IN')
    ->execute();
}

/**
 * WWEC-4631: Sets variable realm for SVG Logo.
 */
function wwe_master_update_7121() {
  // Use code from variable_realm.form.inc to set the realm of our new SVG logo
  // variable to ensure it is translatable.
  $realm_name = 'language';
  $controller = variable_realm_controller($realm_name);
  $variables = $controller->getEnabledVariables();

  if (!array_key_exists('wwe_svg_logo')) {
    $variables[] = 'wwe_svg_logo';
  }
  $controller->setRealmVariable('list', $variables);
  variable_children($variables);
  $controller->deleteVariable('wwe_svg_logo');
}

/**
 * WWEC-4631: Adds class to menu item being used as logo.
 */
function wwe_master_update_7122() {

  // Known mlid for logo menu item.
  $mlid = '227';
  // Setting aside original link for menu_link_save function.
  $original_link = menu_link_load($mlid);
  // Variable to define updates.
  $link = $original_link;

  // Check for menu item and ensure it loads the <front> page.
  if ($link && $link['link_path'] === '<front>') {
    // Update array in both places for the menu item and the menu link.
    // Note that when updating the menu item via the UI, both spots are
    // updated; thus, we do the same.

    // menu__item
    $link['options']['item_attributes']['class'][] = 'menu__item--wwe-logo';
    $link['localized_options']['item_attributes']['class'][] = 'menu__item--wwe-logo';

    // menu__link
    $link['options']['attributes']['class'][] = 'menu__link--wwe-logo';
    $link['localized_options']['attributes']['class'][] = 'menu__link--wwe-logo';

    // If the menu item saves, rebuilt menu cache.
    if (menu_link_save($link, $original_link)) {
      menu_cache_clear_all();
    }
  }
}

/**
 * WWEC-4510: Creates new vocabulary called "Poll Category".
 */
function wwe_master_update_7123() {
  $new_vocab = (object) [
    'name' => 'Poll Category',
    'description' => 'Category used to associate multiple polls so fans can take alike polls in succession.',
    'machine_name' => 'poll_category',
  ];
  taxonomy_vocabulary_save($new_vocab);
}

/**
 * WWEC-4510: Creates field field_poll_category.
 */
function wwe_master_update_7124() {
  if (field_info_field('field_poll_category') == FALSE) {
    $field = [
      'field_name' => 'field_poll_category',
      'type' => 'taxonomy_term_reference',
      'label' => t('Categorization'),
      'settings' => [
        'allowed_values' => [
          [
            'vocabulary' => 'poll_category',
            'parent' => 0,
          ],
        ],
      ],
      'widget' => [
        'weight' => 2,
        'type' => 'autocomplete_deluxe_taxonomy',
      ],
      'autocomplete_deluxe_path' => 'autocomplete_deluxe/taxonomy',
      // Allow multi-select.
      'cardinality' => -1,
    ];
    field_create_field($field);
  }
}

/**
 * WWEC-4510: Adds field to vocabulary "Poll Category".
 */
function wwe_master_update_7125() {
  $instance = [
    'field_name' => 'field_poll_category',
    'entity_type' => 'node',
    'bundle' => 'poll',
    'label' => 'Poll Category',
    'description' => 'The poll category to be used.',
    'required' => TRUE,
    'widget' => [
      'weight' => 22,
      'type' => 'autocomplete_deluxe_taxonomy',
    ],
  ];
  field_create_instance($instance);

  // Add the field to the Categorization field group.
  $groups = field_group_read_groups([
    'entity_type' => 'node',
    'bundle' => 'poll',
    'view_mode' => 'form',
  ]);
  $field_group = $groups['node']['poll']['form']['group_categorization'];
  $field_group->children[] = 'field_poll_category';
  field_group_group_save($field_group);
}

/**
 * CMS-127: Canonical tags should be absolute.
 */
function wwe_master_update_7126() {
  if (module_exists('metatag')) {
    $config = metatag_config_load('global');
    $config->config['canonical']['value'] = '[current-page:wwe_master_url_with_base_url]';
    metatag_config_save($config);
  }
}

/**
 * ux-227: Twitter thumbnail not appearing.
 * New token has been created to render an absolute path (required by
 * Twitter to find image on our servers).
 */
function wwe_master_update_7127() {
  // Cheking for metatags module.
  if (module_exists('metatag')) {
    $config = metatag_config_load('node');
    if (!empty($config->config['twitter:image']['value'])) {
      $config->config['twitter:image']['value'] = '[node:thumbnail_image_url_or_primary_image_url:wwe_large:absolute]';
      metatag_config_save($config);
    }
  }
}

/**
 * SP-70: Unpublishing Data preferences page as we now use a js link to open
 * the Truste pop up with the Cookie preferences instead of having it embedded
 * in an iframe in this node.
 */
function wwe_master_update_7128() {
  $nid = 35000510; // Nid for the data preferences page.

  $node_updated = db_update('node')
    ->fields(['status' => 0])
    ->condition('nid', $nid)
    ->execute();

  $node_revision_updated = db_update('node_revision')
    ->fields(['status' => 0])
    ->condition('nid', $nid)
    ->execute();

  if ($node_updated == 1 && $node_revision_updated == 1) {
    return t('Node (' . $nid . ') unpublished.');
  }
}

/**
 * SP-219: Add "Save and Continue" button to Link content type.
 */
function wwe_master_update_7129() {
  $save_edit_node_types = variable_get('save_edit_node_types', []);

  if (!empty($save_edit_node_types)) {
    $save_edit_node_types['link'] = 'link';
    variable_set('save_edit_node_types', $save_edit_node_types);
  }
}

/**
 * UX-370: Iperceptions survey code missing from most pages.
 */
function wwe_master_update_7130() {
  // Default survey config.
  $default_config = [
    'homepage' => 'homepage',
    'other_pages' => 0,
  ];
  // Get all languages.
  $langs = language_list();
  foreach ($langs as $key => $lang) {
    if ($lang->enabled == 1) {
      variable_set('wwe_survey_module_' . $key, $default_config);
    }
  }
}

/**
 * WEB-30: Ability to customize and override Breakers for Show, Talent and
 * Section contents.
 */
function wwe_master_update_7131() {

  // Create the fields.
  if (!field_info_field('field_node_breakers')) {
    $field_node_breakers = [
      'field_name' => 'field_node_breakers',
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'node',
        'handler_settings' => [
          'target_bundles' =>
            [
              'entity_content_pane',
            ],
        ],
      ],
    ];
    field_create_field($field_node_breakers);
  }

  if (!field_info_field('field_node_breakers_override')) {
    $field_node_breakers_override = [
      'field_name' => 'field_node_breakers_override',
      'type' => 'list_boolean',
      'settings' => [
        'allowed_values' => [
          0 => 0,
          1 => 1,
        ],
      ],
    ];
    field_create_field($field_node_breakers_override);
  }

  // Create instances and group for each bundle.
  $bundles = ['show', 'section', 'talent'];
  foreach ($bundles as $bundle) {
    if (empty(field_info_instance('node', 'field_node_breakers', $bundle))) {
      $instance = [
        'bundle' => $bundle,
        'default_value' => NULL,
        'deleted' => 0,
        'description' => t('Set custom breakers for this node.'),
        'display' => [
          'default' => [
            'label' => 'above',
            'module' => 'entityreference',
            'settings' => [
              'link' => FALSE,
            ],
            'type' => 'entityreference_label',
            'weight' => 10,
          ],
          'teaser' => [
            'label' => 'above',
            'settings' => [],
            'type' => 'hidden',
            'weight' => 10,
          ],
        ],
        'entity_type' => 'node',
        'field_name' => 'field_node_breakers',
        'label' => t('Node Breakers'),
        'required' => FALSE,
        'widget' => [
          'module' => 'wwe_media_browser',
          'type' => 'wwe_media_browser_entityreference_browser',
          'weight' => 10,
        ],
      ];
      field_create_instance($instance);

      $instance = [
        'bundle' => $bundle,
        'default_value' => 0,
        'deleted' => 0,
        'description' => t('If <i>checked</i>, this breakers will override default template breakers. If not, template breakers will be shown after this breakers.'),
        'display' => [
          'default' => [
            'label' => 'above',
          ],
        ],
        'entity_type' => 'node',
        'field_name' => 'field_node_breakers_override',
        'label' => t('Override breakers'),
        'required' => FALSE,
        'widget' => [
          'module' => 'options',
          'type' => 'options_onoff',
          'weight' => 10,
          'settings' => [
            'display_label' => 1,
          ],
        ],
      ];
      field_create_instance($instance);

      $group_identifier = 'group_breakers|node|' . $bundle . '|form';
      $group = (object) [
        'identifier' => $group_identifier,
        'group_name' => 'group_breakers',
        'entity_type' => 'node',
        'bundle' => $bundle,
        'mode' => 'form',
        'label' => 'Breakers',
        'weight' => '11',
        'children' => [
          'field_node_breakers',
          'field_node_breakers_override',
        ],
        'format_type' => 'tab',
        'format_settings' => [
          'formatter' => 'closed',
          'instance_settings' => [
            'description' => '',
            'classes' => 'group-breakers field-group-tab',
            'required_fields' => 1,
          ],
        ],
      ];

      field_group_group_save($group);
      ctools_include('export');
      ctools_export_crud_enable('field_group', $group->identifier);
    }
  }
}

/*
 * WEB-29: Adding new table to store file's MD5 hash.
 */
function wwe_master_update_7132() {
  $schema = module_invoke('wwe_master', 'schema');
  db_create_table('file_md5', $schema['file_md5']);
}

/**
 * Enable the landing page (wwe_lp, wwe_lp_news, wwe_lp_photo), module_filter
 * and filter_perms modules.
 */
function wwe_master_update_7133() {
  $modules = [
    'wwe_lp',
    'wwe_lp_news',
    'wwe_lp_photo',
    'module_filter',
    'filter_perms',
  ];

  $ret = '';

  if (module_enable($modules)) {
    $ret = implode(' ', $modules) . ' modules enabled.';
  }

  return t($ret);
}

/**
 * Remove the redirect from /news to the homepage.
 */
function wwe_master_update_7134() {
  $deleted = db_delete('redirect')
    ->condition('source', 'news')
    ->execute();

  if ($deleted) {
    return t('/news redirect deleted');
  }
}

/**
 * Delete the node that has the news url_alias
 */
function wwe_master_update_7135() {
  $alias = db_select('url_alias', 'ua')
    ->fields('ua', ['source'])
    ->condition('ua.alias', 'news')
    ->execute()->fetchCol();

  $nid = str_replace('node/', '', $alias[0]);

  node_delete($nid);
  return t('Node with url alias \'/news\', deleted');
}

/**
 * WEB: 123: Remove the redirect from /photos to the homepage.
 */
function wwe_master_update_7136() {
  $deleted = db_delete('redirect')
    ->condition('source', 'photos')
    ->execute();

  if ($deleted) {
    return t('/photos redirect deleted');
  }
}

/**
 * WEB: 123: Delete the node that has the photos url_alias.
 */
function wwe_master_update_7137() {
  $alias = db_select('url_alias', 'ua')
    ->fields('ua', ['source'])
    ->condition('ua.alias', 'photos')
    ->execute()->fetchCol();

  $nid = str_replace('node/', '', $alias[0]);

  node_delete($nid);
  return t('Node with url alias \'/photos\', deleted');
}

/**
 * WEB-302: Add "Save and Continue" button to several content types.
 */
function wwe_master_update_7138() {
  $save_edit_node_types = variable_get('save_edit_node_types', []);

  if (!empty($save_edit_node_types)) {
    $save_edit_node_types['article'] = 'article';
    $save_edit_node_types['event'] = 'event';
    $save_edit_node_types['gallery'] = 'gallery';
    $save_edit_node_types['match'] = 'match';
    $save_edit_node_types['section'] = 'section';
    $save_edit_node_types['show'] = 'show';
    $save_edit_node_types['talent'] = 'talent';
    $save_edit_node_types['video_playlist'] = 'video_playlist';
    variable_set('save_edit_node_types', $save_edit_node_types);
  }
}

/**
 * WEB-124: Enable the video landing page module.
 */
function wwe_master_update_7139() {
  $modules = [
    'wwe_lp_video',
  ];

  $ret = '';

  if (module_enable($modules)) {
    $ret = implode(' ', $modules) . ' modules enabled.';
  }

  return t($ret);
}

/**
 * WEB-124: Remove the redirect from /videos to the homepage.
 */
function wwe_master_update_7140() {
  $deleted = db_delete('redirect')
    ->condition('source', 'videos')
    ->execute();

  if ($deleted) {
    return t('/videos redirect deleted');
  }
}

/**
 * WEB: 124: Delete the node that has the videos url_alias.
 */
function wwe_master_update_7141() {
  $alias = db_select('url_alias', 'ua')
    ->fields('ua', ['source'])
    ->condition('ua.alias', 'videos')
    ->execute()->fetchCol();

  $nid = str_replace('node/', '', $alias[0]);

  node_delete($nid);
  return t('Node with url alias \'/videos\', deleted');
}

/**
 * WEB-315: Set ES and DE page title, title and description for news landing
 * page.
 */
function wwe_master_update_7142() {
  // This variable is new, so no old value available.
  $page_titles = [
    'en' => 'WWE News',
    'es' => 'Noticias de WWE',
    'de' => 'WWE News',
  ];

  foreach ($page_titles as $lang => $val) {
    variable_set('wwe_lp_news_page_title_' . $lang, $val);
  }

  // For English, use the old variable value to set the new one.
  $titles = [
    'en' => variable_get('wwe_lp_news_section_title', WWE_LP_NEWS_DEFAULT_SECTION_TITLE),
    'es' => 'Noticias de WWE',
    'de' => 'WWE News',
  ];

  foreach ($titles as $lang => $val) {
    variable_set('wwe_lp_news_section_title_' . $lang, $val);
  }

  // For English, use the old variable value to set the new one.
  $descriptions = [
    'en' => variable_get('wwe_lp_news_section_description', WWE_LP_NEWS_DEFAULT_SECTION_DESCRIPTION),
    'es' => 'Obtén las últimas noticias de WWE & resultados de tus Superestrellas favoritas de WWE de la actualidad.',
    'de' => 'Erhaltet die neuesten Breaking WWE News & Ergebnisse Eurer WWE Superstars',
  ];

  foreach ($descriptions as $lang => $val) {
    variable_set('wwe_lp_news_section_description_' . $lang, $val);
  }
}

/**
 * WEB-317: Set ES and DE page title, title and description for photo landing
 * page.
 */
function wwe_master_update_7143() {
  // This variable is new, so no old value available.
  $page_titles = [
    'en' => 'WWE Photos & Pictures',
    'es' => 'Fotos de WWE',
    'de' => 'WWE Fotos & Bilders',
  ];

  foreach ($page_titles as $lang => $val) {
    variable_set('wwe_lp_photo_page_title_' . $lang, $val);
  }

  // For English, use the old variable value to set the new one.
  $titles = [
    'en' => variable_get('wwe_lp_photo_section_title', WWE_LP_PHOTO_DEFAULT_SECTION_TITLE),
    'es' => 'Fotos de WWE',
    'de' => 'WWE Fotos',
  ];

  foreach ($titles as $lang => $val) {
    variable_set('wwe_lp_photo_section_title_' . $lang, $val);
  }

  // For English, use the old variable value to set the new one.
  $descriptions = [
    'en' => variable_get('wwe_lp_photo_section_description', WWE_LP_PHOTO_DEFAULT_SECTION_DESCRIPTION),
    'es' => 'Ve fotos de tus luchas favoritas de WWE – incluyendo Raw, Smackdown, WrestleMania, Royal Rumble, SummerSlam y Survivor Series.',
    'de' => 'Erhaltet die neuesten WWE Fotos und Bilder Eurer Lieblingsmatches bei WWE - inklusive Raw, Smackdown, WrestleMania, Royal Rumble, SummerSlam und Survivor Series.',
  ];

  foreach ($descriptions as $lang => $val) {
    variable_set('wwe_lp_photo_section_description_' . $lang, $val);
  }
}

/**
 * WEB-558: Translate CTAs copy.
 */
function wwe_master_update_7144() {
  $report = ['additions' => 0, 'updates' => 0, 'deletes' => 0, 'skips' => 0];
  $msgid = 'More WWE News';

  // Translate to Spanish.
  $msgstr_es = 'Más Noticias de WWE';
  _locale_import_one_string_db($report, 'es', '', $msgid, $msgstr_es, 'default', '', 'LOCALE_IMPORT_KEEP');

  // Translate to German.
  $msgstr_de = 'Mehr WWE News';
  _locale_import_one_string_db($report, 'de', '', $msgid, $msgstr_de, 'default', '', 'LOCALE_IMPORT_KEEP');

  $msgid = 'More WWE Videos';

  // Translate to Spanish.
  $msgstr_es = 'Más Videos de WWE';
  _locale_import_one_string_db($report, 'es', '', $msgid, $msgstr_es, 'default', '', 'LOCALE_IMPORT_KEEP');

  // Translate to German.
  $msgstr_de = 'Mehr WWE Videos';
  _locale_import_one_string_db($report, 'de', '', $msgid, $msgstr_de, 'default', '', 'LOCALE_IMPORT_KEEP');

}

/**
 * WEB-501: Checkerboard & Footer in CMS should be independent of one another.
 */
function wwe_master_update_7145() {
  // Create primary menus.
  $checkerboard_links = menu_load_links('menu-legal');

  // Create Checkerboard Primary menu.
  $checkerboard_primary_menu = [
    'menu_name' => 'menu-checkerboard-primary',
    'title' => t('Checkerboard - Primary Links'),
    'description' => t('Primary links for the Checkerboard menu.'),
    'i18n_mode' => I18N_MODE_MULTIPLE,
  ];
  menu_save($checkerboard_primary_menu);

  $checkerboard_primary_cloned = menu_links_clone($checkerboard_links, $checkerboard_primary_menu['menu_name']);
  foreach ($checkerboard_primary_cloned as $new_menu_item) {
    menu_link_save($new_menu_item);
  }

  // Create Footer Primary menu.
  $footer_primary_menu = [
    'menu_name' => 'menu-footer-primary',
    'title' => t('Footer - Primary Links'),
    'description' => t('Primary links for the footer menu.'),
    'i18n_mode' => I18N_MODE_MULTIPLE,
  ];
  menu_save($footer_primary_menu);

  $footer_primary_cloned = menu_links_clone($checkerboard_links, $footer_primary_menu['menu_name']);
  foreach ($footer_primary_cloned as $new_menu_item) {
    menu_link_save($new_menu_item);
  }

  // Create secondary menus.
  $footer_links = menu_load_links('menu-footer');

  // Create Checkerboard Secondary menu.
  $checkerboard_secondary_menu = [
    'menu_name' => 'menu-checkerboard-secondary',
    'title' => t('Checkerboard - Secondary Links'),
    'description' => t('Secondary links for the checkerboard menu.'),
    'i18n_mode' => I18N_MODE_MULTIPLE,
  ];
  menu_save($checkerboard_secondary_menu);

  $checkerboard_secondary_cloned = menu_links_clone($footer_links, $checkerboard_secondary_menu['menu_name']);
  foreach ($checkerboard_secondary_cloned as $new_menu_item) {
    menu_link_save($new_menu_item);
  }

  // Create Footer Secondary menu.
  $footer_secondary_menu = [
    'menu_name' => 'menu-footer-secondary',
    'title' => t('Footer - Secondary Links'),
    'description' => t('Secondary links for the footer menu.'),
    'i18n_mode' => I18N_MODE_MULTIPLE,
  ];
  menu_save($footer_secondary_menu);

  $footer_secondary_cloned = menu_links_clone($footer_links, $footer_secondary_menu['menu_name']);
  foreach ($footer_secondary_cloned as $new_menu_item) {
    menu_link_save($new_menu_item);
  }

  // Delete menus.
  $menus = [
    'menu-footer',
    'menu-legal',
  ];

  foreach ($menus as $menu_name) {
    $menu = menu_load($menu_name);
    menu_delete($menu);
  }

  menu_cache_clear_all();
}

function wwe_master_update_7146() {
  module_enable(
    [
      'chosen',
      'wwe_howtowatch',
    ]
  );
}

/**
 * Implements update_hook_N().
 *
 * WEB-642: Enable the wwe_mdm module.
 */
function wwe_master_update_7147() {
  module_enable(['wwe_mdm']);
}

/**
 * Implements update_hook_N().
 *
 * WEB-642: Grant permissions to the module.
 */
function wwe_master_update_7148() {
  $admin_role = user_role_load_by_name('Administrator');
  $content_manager_role = user_role_load_by_name('Content Manager');

  if (!empty($admin_role)) {
    user_role_grant_permissions($admin_role->rid, [
      'administer mdm import settings',
      'use mdm importer',
      'use mdm sync',
    ]);
  }

  if (!empty($content_manager_role)) {
    user_role_grant_permissions($content_manager_role->rid, [
      'use mdm importer',
      'use mdm sync',
    ]);
  }
}

/**
 * WEB-934: Apple News: All embedded media should have "stage" removed upon
 * transmission from CMS.
 */
function wwe_master_update_7149() {
  // Set production URLs.
  variable_set('wwe_prod_url_en', 'www.wwe.com');
  variable_set('wwe_prod_url_es', 'espanol.wwe.com');
  variable_set('wwe_prod_url_de', 'de.wwe.com');
}

/**
 * WEB-819: Set alt text and required aria attributes to the WWE Logo.
 */
function wwe_master_update_7150() {
  $langs = language_list();

  foreach ($langs as $langcode => $lang) {
    if (empty($lang->enabled)) {
      continue;
    }

    $region_logo = i18n_variable_get('wwe_svg_logo', $langcode);

    if (!empty($region_logo)) {
      $doc = new \DOMDocument();
      $doc->loadXML($region_logo);
      $xpath = new \DOMXPath($doc);
      $svg_nodes = $doc->getElementsByTagName('svg');
      if (!empty($svg_nodes)) {
        $svg_node = $svg_nodes->item(0);

        if (!$svg_node->hasAttribute('role')) {
          $svg_node->setAttribute('role', 'img');
        }

        if (!$svg_node->hasAttribute('focusable')) {
          $svg_node->setAttribute('focusable', "false");
        }

        if (!$svg_node->hasAttribute('aria-labelledby')) {
          $svg_node->setAttribute('aria-labelledby', 'wwe-logo-label');
          $title_elements = $xpath->query('.//title[@id="wwe-logo-label"]', $svg_node);
          if (empty($title_elements->length)) {
            $title_element = $doc->createElement('title', 'WWE Logo');
            $title_element->setAttribute('id', 'wwe-logo-label');
            $svg_node->appendChild($title_element);
          }
        }

        $region_logo = $doc->saveXML($svg_node);
        i18n_variable_set('wwe_svg_logo', $region_logo, $langcode);
      }

    }
  }
}

/**
 * WEB-812: Add timezone to End Date (field_end_date) to Reign content type.
 */
function wwe_master_update_7151() {
  // Adding timezone and offset columns the field table.
  $timezone = [
    'type' => 'varchar',
    'length' => 50,
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => FALSE,
  ];
  $offset = [
    'type' => 'int',
    'not null' => FALSE,
    'sortable' => TRUE,
    'views' => FALSE,
  ];
  db_add_field('field_data_field_end_date', 'field_end_date_timezone', $timezone);
  db_add_field('field_data_field_end_date', 'field_end_date_offset', $offset);
  db_add_field('field_revision_field_end_date', 'field_end_date_timezone', $timezone);
  db_add_field('field_revision_field_end_date', 'field_end_date_offset', $offset);

  // Update field config record by fetching, changing and saving.
  $query = db_query('SELECT data FROM {field_config} WHERE field_name = :name', [':name' => 'field_end_date']);
  $settings_array = unserialize($query->fetchField());
  // Change timezone handling.
  $settings_array['settings']['tz_handling'] = 'date';
  $settings_array['settings']['timezone_db'] = 'America/New_York';
  // Change storage settings.
  $settings_array['storage']['details']['sql']['FIELD_LOAD_CURRENT']['field_data_field_end_date'] = [
    'value' => 'field_end_date_value',
    'timezone' => 'field_end_date_timezone',
    'offset' => 'field_end_date_offset',
  ];
  $settings_array['storage']['details']['sql']['FIELD_LOAD_REVISION']['field_revision_field_end_date'] = [
    'value' => 'field_end_date_value',
    'timezone' => 'field_end_date_timezone',
    'offset' => 'field_end_date_offset',
  ];

  db_update('field_config')
    ->fields(['data' => serialize($settings_array)])
    ->condition('field_name', 'field_end_date')
    ->execute();

  // Set all timezone values.
  db_update('field_data_field_end_date')
    ->fields(['field_end_date_timezone' => 'America/New_York'])
    ->execute();

  // Set offset values by calculating appropriate EST or EDT offsets.
  $result = db_query('SELECT entity_id,language,delta,field_end_date_value FROM {field_data_field_end_date}');

  foreach ($result as $record) {
    // Calculate offset from UTC timestamp and timezone, America/New_York.
    $timestamp = $record->field_end_date_value;
    $string = date('Y-m-d\TH:i:s', $timestamp);
    $date_time_zone = new DateTimeZone('America/New_York');
    $date_time = new DateTime($string, $date_time_zone);
    $offset = timezone_offset_get($date_time_zone, $date_time);

    db_update('field_data_field_end_date')
      ->fields(['field_end_date_offset' => $offset])
      ->condition('entity_id', $record->entity_id, '=')
      ->condition('language', $record->language, '=')
      ->condition('delta', $record->delta, '=')
      ->execute();
  }

  // Update all field instances.
  $info = field_info_field('field_end_date');
  $node_bundles = $info['bundles']['node'];

  foreach ($node_bundles as $bundle) {
    $instance_info = field_info_instance('node', 'field_end_date', $bundle);
    field_update_instance($instance_info);
  }

  field_flush_caches();
}

/**
 * WEB-498: Adds image fields to the Basic Page CT.
 */
function wwe_master_update_7152() {
  // Create the field_primary_image instance.
  if (empty(field_info_instance('node', 'field_primary_image', 'page'))) {
    $instance = [
      'field_name' => 'field_primary_image',
      'entity_type' => 'node',
      'bundle' => 'page',
      'label' => 'Image',
      'description' => 'Primary image of basic page. Shown at top of page on basic page detail pages. Should be 1600px wide.',
      'widget' => [
        'type' => 'wwe_media_browser_entityreference_browser',
        'module' => 'wwe_media_browser',
      ],
      'display' => [
        'default' => [
          'type' => 'hidden',
        ],
      ],
    ];
    field_create_instance($instance);
  }

  // Create the field_thumbnail_image instance.
  if (empty(field_info_instance('node', 'field_thumbnail_image', 'page'))) {
    $instance = [
      'field_name' => 'field_thumbnail_image',
      'entity_type' => 'node',
      'bundle' => 'page',
      'label' => 'Thumbnail Image',
      'description' => 'Used in references to this basic page and not within the basic page detail page. If left empty will default to the primary image above.',
      'widget' => [
        'type' => 'wwe_media_browser_entityreference_browser',
        'module' => 'wwe_media_browser',
      ],
      'display' => [
        'default' => [
          'type' => 'hidden',
        ],
      ],
    ];
    field_create_instance($instance);
  }

  // Create the Media field group.
  $group = (object) [
    'identifier' => 'group_media|node|page|form',
    'group_name' => 'group_media',
    'entity_type' => 'node',
    'bundle' => 'page',
    'mode' => 'form',
    'label' => 'Media',
    'children' => [
      'field_primary_image',
      'field_thumbnail_image',
    ],
    'weight' => '4',
    'format_type' => 'tab',
    'format_settings' => [
      'formatter' => 'closed',
      'instance_settings' => [
        'description' => '',
        'classes' => 'group-media field-group-tab',
        'required_fields' => 1,
      ],
    ],
  ];
  field_group_group_save($group);
  ctools_include('export');
  ctools_export_crud_enable('field_group', $group->identifier);
}

/**
 * Implements update_hook_N.
 *
 * Enable the wwe_entity_api module
 */
function wwe_master_update_7153() {
  module_enable(['wwe_entity_api']);
}

/**
 * Implements update_hook_N().
 *
 * Grant permissions to the entity api module.
 */
function wwe_master_update_7154() {
  $anon_role = user_role_load_by_name('anonymous user');
  $auth_role = user_role_load_by_name('authenticated user');
  $admin_role = user_role_load_by_name('Administrator');
  $content_manager_role = user_role_load_by_name('Content Manager');

  if (!empty($admin_role)) {
    user_role_grant_permissions($admin_role->rid, [
      'administer entity api',
    ]);
  }

  if (!empty($content_manager_role)) {
    user_role_grant_permissions($content_manager_role->rid, [
      'administer entity api',
    ]);
  }

  if (!empty($anon_role)) {
    user_role_grant_permissions($anon_role->rid, [
      'access entity api',
    ]);
  }

  if (!empty($auth_role)) {
    user_role_grant_permissions($auth_role->rid, [
      'access entity api',
    ]);
  }
}

/**
 * Implements update_hook_N.
 *
 * Enable the wwe_nlp module
 */
function wwe_master_update_7155() {
  module_enable(['wwe_nlp']);
}

/**
 * Implements update_hook_N().
 *
 * Grant permissions to the wwe_nlp module.
 */
function wwe_master_update_7156() {
  $admin_role = user_role_load_by_name('Administrator');
  $content_manager_role = user_role_load_by_name('Content Manager');

  if (!empty($admin_role)) {
    user_role_grant_permissions($admin_role->rid, [
      'administer network landing page settings',
    ]);
  }

  if (!empty($content_manager_role)) {
    user_role_grant_permissions($content_manager_role->rid, [
      'administer network landing page settings',
    ]);
  }
}

/**
 * Implements wwe_master_https_update().
 *
 * Update the change in database tables
 * metatag,page_manager_handlers,panels_pane http string with https sting with
 * serialize data store in DB.
 */
function wwe_master_update_7157() {
  wwe_master_https_update();
}

/**
 * Implements wwe_master_https_variable_update().
 *
 * Update the change in database tables variable http string with https string
 * with serialize data store in DB.
 */
function wwe_master_update_7158() {
  wwe_master_https_variable_update();
}

/**
 * WWE-1544 Initializes variables by default.
 */
function wwe_master_update_7159() {
  // Set default variables.
  variable_set('wwe_master_googlenews_content_types', [
    'article',
    'match',
    'episode',
  ]);
}

/**
 * WEB-1574: Create new googlenews_enable field and instances.
 */
function wwe_master_update_7160() {
  $field_machine_name = 'field_googlenews_enable';

  // Create field.
  if (!field_info_field($field_machine_name)) {
    $field = [
      'active' => '1',
      'cardinality' => '1',
      'field_name' => $field_machine_name,
      'module' => 'list',
      'type' => 'list_boolean',
      'settings' => [
        'allowed_values' => [
          0 => 0,
          1 => 1,
        ],
      ],
      'translatable' => '0',
    ];
    field_create_field($field);
  }
  // Create instances.
  $bundles = variable_get('wwe_master_googlenews_content_types', [
    'article',
    'match',
    'episode',
  ]);
  foreach ($bundles as $bundle) {
    if (!empty($bundle)) {
      if (!field_info_instance('node', $field_machine_name, $bundle)) {
        $instance = [
          'bundle' => $bundle,
          'default_value' => [
            0 => [
              'value' => 0,
            ],
          ],
          'description' => t('Google News.'),
          'entity_type' => 'node',
          'field_name' => $field_machine_name,
          'label' => t('Exclude from Google News'),
          'required' => 0,
          'widget' => [
            'active' => 1,
            'module' => 'options',
            'settings' => [
              'display_label' => 1,
            ],
            'type' => 'options_onoff',
            'weight' => 0,
          ],
        ];
        field_create_instance($instance);
      }

      // Create Google News tab.
      $group_name = 'group_google_news';
      $group_identifier = $group_name . '|node|' . $bundle . '|form';
      $group = (object) [
        'identifier' => $group_identifier,
        'group_name' => $group_name,
        'entity_type' => 'node',
        'bundle' => $bundle,
        'mode' => 'form',
        'label' => 'Google News',
        'weight' => '13',
        'children' => [
          'field_googlenews_enable',
        ],
        'format_type' => 'tab',
        'format_settings' => [
          'formatter' => 'closed',
          'instance_settings' => [
            'description' => '',
            'classes' => 'group-google-news field-group-tab',
            'required_fields' => 1,
          ],
        ],
      ];

      field_group_group_save($group);
      ctools_include('export');
      ctools_export_crud_enable('field_group', $group->identifier);
    }
  }
}

/**
 *
 * WEB-1619: Adds field_byline to Episodes content type.
 */
function wwe_master_update_7161() {
  $field_name = 'field_byline';
  $entity_type = 'node';
  $content_type = node_type_get_type('episode');
  $field_data = [
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $content_type->type,
    'label' => 'Byline',
    'widget' => [
      'weight' => 4,
      'type' => 'taxonomy_autocomplete',
    ],
  ];

  field_create_instance($field_data);

  $group_name = 'group_content';
  $view_mode = 'form';
  $label = 'Content';
  $groups = field_group_read_groups([
    'entity_type' => $entity_type,
    'bundle' => $content_type->type,
    'view_mode' => 'full',
  ]);
  $field_group = $groups[$entity_type][$content_type->type]['form'][$group_name];
  // If the field group doesn't exist on the content type, create it.
  if (empty($field_group)) {
    $field_group = (object) [
      'identifier' => $group_name . '|' . $entity_type . '|' . $content_type->type . '|' . $view_mode,
      'group_name' => $group_name,
      'entity_type' => $entity_type,
      'bundle' => $content_type->type,
      'mode' => $content_type->type,
      'label' => $label,
      'weight' => '1',
      'children' => [],
      'format_type' => 'tab',
      'format_settings' => [
        'formatter' => 'closed',
        'instance_settings' => [
          'description' => '',
          'classes' => '',
          'required_fields' => 1,
        ],
      ],
    ];
  }
  $field_group->children[] = $field_name;
  field_group_group_save($field_group);
  ctools_include('export');
  ctools_export_crud_enable('field_group', $field_group->identifier);
}

/**
 * WEB-1748: Enable international editor to choose their own thumbnail for
 * content.
 */
function wwe_master_update_7162() {
  if (module_exists('entity_translation')) {
    $field_name = 'field_thumbnail_image';

    $operations = [
      [
        'wwe_master_entity_translation_translatable_switch',
        [TRUE, $field_name],
      ],
      [
        'wwe_master_entity_translation_translatable_batch',
        [TRUE, $field_name, TRUE],
      ],
    ];
    $batch = [
      'title' => t('Enabling translation for the %field field', ['%field' => $field_name]),
      'operations' => $operations,
      'finished' => 'wwe_master_entity_translation_translatable_batch_done',
      'file' => drupal_get_path('module', 'entity_translation') . '/entity_translation.admin.inc',
    ];

    batch_set($batch);
  }
}

/**
 * Toggle translatability of the given field.
 *
 * This is called from a batch operation, but should only run once per field.
 */
function wwe_master_entity_translation_translatable_switch($translatable, $field_name) {
  $field = field_info_field($field_name);

  if ($field['translatable'] === $translatable) {
    return;
  }

  $field['translatable'] = $translatable;
  try {
    field_update_field($field);
  } catch (Exception $ex) {
    $replacements = [
      '@function' => __FUNCTION__,
      '@string' => $ex->getTraceAsString(),
    ];

    watchdog(
      'thumbnail_image_error',
      'See @function() <pre>@string</pre>',
      $replacements,
      WATCHDOG_ERROR
    );
  }

}

/**
 * Batch operation. Convert field data to or from LANGUAGE_NONE.
 */
function wwe_master_entity_translation_translatable_batch($translatable, $field_name, $copy_all_languages, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;

    // How many entities will need processing?
    $query = new EntityFieldQuery();
    $count = $query
      ->fieldCondition($field_name)
      ->count()
      ->execute();

    if (intval($count) === 0) {
      // Nothing to do.
      $context['finished'] = 1;
      return;
    }
    $context['sandbox']['max'] = $count;
  }

  $offset = $context['sandbox']['progress'];
  $query = new EntityFieldQuery();
  $result = $query
    ->fieldCondition($field_name)
    ->entityOrderBy('entity_id')
    ->range($offset, 100)
    ->execute();

  foreach ($result as $entity_type => $entities) {
    foreach (entity_load($entity_type, array_keys($entities)) as $id => $entity) {
      $context['sandbox']['progress']++;
      $handler = entity_translation_get_handler($entity_type, $entity);
      $langcode = $handler->getLanguage();

      // Skip process for language neutral entities.
      if ($langcode == LANGUAGE_NONE) {
        continue;
      }

      // We need a two-steps approach while updating field translations: given
      // that field-specific update functions might rely on the stored values to
      // perform their processing, see for instance file_field_update(), first
      // we need to store the new translations and only after we can remove the
      // old ones. Otherwise we might have data loss, since the removal of the
      // old translations might occur before the new ones are stored.
      if ($translatable && isset($entity->{$field_name}[LANGUAGE_NONE])) {
        // If the field is being switched to translatable and has data for
        // LANGUAGE_NONE then we need to move the data to the right language.
        try {
          $translations = $handler->getTranslations();

          if (!empty($entity->{$field_name}[LANGUAGE_NONE][0]['target_id'])) {
            if ($copy_all_languages && !empty($translations->data)) {
              foreach ($translations->data as $translation) {
                db_merge('field_data_' . $field_name)
                  ->key([
                    'entity_type' => $entity_type,
                    'entity_id' => $id,
                    'deleted' => 0,
                    'delta' => 0,
                    'language' => $translation['language'],
                  ])
                  ->fields([
                    'entity_type' => $entity_type,
                    'bundle' => $entity->type,
                    'deleted' => 0,
                    'entity_id' => $id,
                    'revision_id' => $id,
                    'language' => $translation['language'],
                    'delta' => 0,
                    $field_name . '_target_id' => $entity->{$field_name}[LANGUAGE_NONE][0]['target_id'],
                  ])
                  ->execute();
              }
            }

            db_delete('field_data_' . $field_name)
              ->condition('entity_id', $id)
              ->condition('language', LANGUAGE_NONE)
              ->condition($field_name . '_target_id', $entity->{$field_name}[LANGUAGE_NONE][0]['target_id'])
              ->execute();
          }
        } catch (Exception $ex) {
          $replacements = [
            '@function' => __FUNCTION__,
            '@string' => $ex->getTraceAsString(),
          ];

          watchdog(
            'thumbnail_image_error',
            'See @function() <pre>@string</pre>',
            $replacements,
            WATCHDOG_ERROR
          );
        }
      }
    }
  }

  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
}

/**
 * Check the exit status of the batch operation.
 */
function wwe_master_entity_translation_translatable_batch_done($success, $results, $operations) {
  if ($success) {
    watchdog('wwe_master', 'WEB-1748: Data successfully processed.');
  }
  else {
    watchdog('wwe_master', 'WEB-1748: Something went wrong while processing data. Some nodes may appear to have lost fields.');
  }
}


/**
 * Enable the redis module.
 */
function wwe_master_update_7163() {
  module_enable(['redis']);
}

/**
 * Enable the wwe_survey module.
 */
function wwe_master_update_7164() {
  module_enable(array('wwe_survey'));
}

/**
 * Implements update_hook_N.
 *
 * Enables and configures the OAuth2 Server for MDM to CMS integration.
 */
function wwe_master_update_7165() {
  // Enable the oauth2_server module.
  $modules = [
    'oauth2_server',
    'services',
    'services_definition',
    'services_views',
    'rest_server',
  ];
  module_enable($modules);

  // Set the permissions for adminstering and using the server.
  // Administrators - administer oauth2 server, use oauth2 server,
  // Anonymous - use oauth2 server
  // Authenticated - use oauth2 server
  $anonymous_role = user_role_load_by_name('anonymous user');
  $authenticated_role = user_role_load_by_name('authenticated user');
  $admin_role = user_role_load_by_name('Administrator');

  if (!empty($anonymous_role)) {
    user_role_grant_permissions($anonymous_role->rid, [
      'use oauth2 server',
      'perform unlimited index queries',
    ]);
  }

  if (!empty($authenticated_role)) {
    user_role_grant_permissions($authenticated_role->rid, [
      'use oauth2 server',
      'get any binary files',
      'get own binary files',
      'save file information',
      'get a system variable',
      'set a system variable',
      'perform unlimited index queries',
    ]);
  }

  if (!empty($admin_role)) {
    user_role_grant_permissions($admin_role->rid, [
      'administer oauth2 server',
      'use oauth2 server',
      'administer services',
      'get any binary files',
      'get own binary files',
      'save file information',
      'get a system variable',
      'set a system variable',
    ]);
  }

  // Create an oauth2 server
  $server = entity_create('oauth2_server', []);
  $server->name = 'mdm';
  $server->label = 'MDM';
  $server->settings = [
    'default_scope' => 'meta',
    'enforce_state' => TRUE,
    'allow_implicit' => FALSE,
    'use_openid_connect' => FALSE,
    'use_crypto_tokens' => FALSE,
    'store_encrypted_token_string' => FALSE,
    'require_exact_redirect_uri' => TRUE,
    'grant_types' => [
      'authorization_code' => FALSE,
      'client_credentials' => 'client_credentials',
      'urn:ietf:params:oauth:grant-type:jwt-bearer' => FALSE,
      'refresh_token' => FALSE,
      'password' => FALSE,
    ],
    'always_issue_new_refresh_token' => TRUE,
    'access_lifetime' => 3600,
    'id_lifetime' => 3600,
    'refresh_token_lifetime' => 1209600,
  ];
  $server->save();

  // Create an oauth2 client
  $client = entity_create('oauth2_server_client', []);
  $client->server = $server->name;
  $client->label = 'MDM';
  $client->client_key = 1;
  $client->client_secret = oauth2_server_hash_client_secret('mdm_to_cms');
  $client->redirect_uri = url('oauth2/authorized', ['absolute' => TRUE]);
  $client->automatic_authorization = TRUE;
  $client->save();

  // Create a scope
  $scope = entity_create('oauth2_server_scope', []);
  $scope->server = $server->name;
  $scope->name = 'meta';
  $scope->description = 'Used to pass meta data between MDM and CMS';
  $scope->default = TRUE;
  $scope->save();

  // Create a services endpoint and bind the resources to the oauth server
  // previously created above.
  $endpoint = new stdClass();
  $endpoint->disabled = FALSE;
  $endpoint->api_version = 3;
  $endpoint->name = 'drupalapi';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'api/v1';
  $endpoint->authentication = [
    'oauth2_server' => [
      'server' => 'mdm',
    ],
  ];
  $endpoint->server_settings = [
    'formatters' => [
      'json' => TRUE,
      'xml' => TRUE,
      'bencode' => FALSE,
      'jsonp' => FALSE,
      'php' => FALSE,
    ],
    'parsers' => [
      'application/json' => TRUE,
      'application/xml' => TRUE,
      'multipart/form-data' => TRUE,
      'text/xml' => TRUE,
      'application/x-www-form-urlencoded' => FALSE,
    ],
  ];
  $endpoint->resources = [
    'node' => [
      'operations' => [
        'retrieve' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'create' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'update' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'index' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
      'relationships' => [
        'files' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
      'targeted_actions' => [
        'attach_file' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
    ],
    'taxonomy_vocabulary' => [
      'alias' => 'taxonomy',
      'operations' => [
        'retrieve' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'create' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'update' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'index' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
      'actions' => [
        'retrieveByMachineName' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'getTree' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
    ],
    'taxonomy_term' => [
      'alias' => 'term',
      'operations' => [
        'retrieve' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'create' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'update' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
        'index' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
      'actions' => [
        'selectNodes' => [
          'enabled' => '1',
          'settings' => [
            'oauth2_server' => [
              'require_authentication' => '1',
              'scope' => 'meta',
            ],
          ],
        ],
      ],
    ],
  ];
  $endpoint->debug = 0;

  services_endpoint_save($endpoint);
}

/**
 * Implements update_hook_N.
 *
 * Add an image field instance (field_logo) to the superstar_type vocabulary
 * terms.
 */
function wwe_master_update_7166() {
  // Create the field_logo instance.
  if (empty(field_info_instance('taxonomy_term', 'field_logo', WWE_TALENT_TYPE_MACHINE_NAME))) {
    $instance = [
      'field_name' => 'field_logo',
      'entity_type' => 'taxonomy_term',
      'bundle' => WWE_TALENT_TYPE_MACHINE_NAME,
      'label' => 'Image',
      'description' => '',
      'widget' => [
        'type' => 'wwe_media_browser_entityreference_browser',
        'module' => 'wwe_media_browser',
      ],
      'display' => [
        'default' => [
          'type' => 'hidden',
        ],
      ],
    ];
    try {
      field_create_instance($instance);
    } catch (Exception $e) {
      error_log($e);
    }
  }
}

/**
 * Implements update_hook_N.
 *
 * Create and add a new image field and instance (field_app_image) to the talent
 * nodes. Add the new field in the Images field group.
 */
function wwe_master_update_7167() {
  if (!field_info_field('field_app_image')) {
    $field_app_image = [
      'field_name' => 'field_app_image',
      'type' => 'entityreference',
      'settings' => [
        'target_type' => 'file',
        'handler' => 'base',
        'handler_settings' => [
          'target_bundles' => [
            'fe_photo' => 'fe_photo',
          ],
          'sort' => [
            'type' => 'property',
            'property' => 'timestamp',
            'direction' => 'DESC',
          ],
        ],
      ],
    ];
    try {
      field_create_field($field_app_image);
    } catch (Exception $e) {
      error_log($e);
    }
  }

  // Create the field_app_image instance.
  if (empty(field_info_instance('node', 'field_app_image', 'talent'))) {
    $instance = [
      'field_name' => 'field_app_image',
      'entity_type' => 'node',
      'bundle' => 'talent',
      'label' => 'App Image',
      'description' => '',
      'widget' => [
        'type' => 'wwe_media_browser_entityreference_browser',
        'module' => 'wwe_media_browser',
      ],
      'display' => [
        'default' => [
          'type' => 'hidden',
        ],
      ],
    ];
    try {
      field_create_instance($instance);

      // Add the field to the Images field group.
      $groups = field_group_read_groups([
        'entity_type' => 'node',
        'bundle' => 'talent',
        'view_mode' => 'form',
      ]);
      $field_group = $groups['node']['talent']['form']['group_images'];
      $field_group->children[] = 'field_app_image';
      field_group_group_save($field_group);
    } catch (Exception $e) {
      error_log($e);
    }
  }
}

/**
 * Implements update_hook_N.
 *
 * Creates the group content type.
 */
function wwe_master_update_7168() {
  // Define the node type.
  $group_node = [
    'type' => 'group',
    'name' => t('Group'),
    'base' => 'node_content',
    'description' => t('Used to create groups of talent.'),
    'body_label' => t('Bio'),
  ];

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $group_content_type = node_type_set_defaults($group_node);
  node_add_body_field($group_content_type);

  // Save the content type
  node_type_save($group_content_type);
}


/**
 * Implements update_hook_N.
 *
 * Add Master Data Authority group with the mdm_title, mdm_wweid and
 * mdm_lineage_id fields.
 */
function wwe_master_update_7169() {
  wwe_mdm_add_mdm_fields('node', 'group');
}

/**
 * Implements update_hook_N.
 *
 * Adds the superstars feed view.
 *
 * @throws Exception
 */
function wwe_master_update_7170() {
  $view = new view();
  $view->name = 'superstars';
  $view->description = 'Listing Feeds for content types';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'superstar';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'SuperStars English';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'time';
  $handler->display->display_options['cache']['results_lifespan'] = '21600';
  $handler->display->display_options['cache']['results_lifespan_custom'] = '0';
  $handler->display->display_options['cache']['output_lifespan'] = '21600';
  $handler->display->display_options['cache']['output_lifespan_custom'] = '0';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['query']['options']['distinct'] = TRUE;
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['pager']['options']['items_per_page'] = '100';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['pager']['options']['id'] = '0';
  $handler->display->display_options['pager']['options']['quantity'] = '9';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['style_options']['default_row_class'] = FALSE;
  $handler->display->display_options['style_options']['row_class_special'] = FALSE;
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  /* Sort criterion: Content: Updated date */
  $handler->display->display_options['sorts']['changed']['id'] = 'changed';
  $handler->display->display_options['sorts']['changed']['table'] = 'node';
  $handler->display->display_options['sorts']['changed']['field'] = 'changed';
  $handler->display->display_options['sorts']['changed']['order'] = 'DESC';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'talent' => 'talent',
  );
  $handler->display->display_options['filters']['type']['group'] = 1;

  /* Display: SuperStars (English) */
  $handler = $view->new_display('services', 'SuperStars (English)', 'superstars_en');
  $handler->display->display_options['display_description'] = 'English Feed of Superstars';
  $handler->display->display_options['field_language'] = 'en';
  $handler->display->display_options['defaults']['pager'] = FALSE;
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['pager']['options']['items_per_page'] = '20';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['pager']['options']['id'] = '0';
  $handler->display->display_options['pager']['options']['quantity'] = '9';
  $handler->display->display_options['defaults']['fields'] = FALSE;
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = 'title';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['strip_tags'] = TRUE;
  $handler->display->display_options['fields']['title']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['title']['element_default_classes'] = FALSE;
  $handler->display->display_options['fields']['title']['link_to_node'] = FALSE;
  /* Field: Content: Nid */
  $handler->display->display_options['fields']['nid']['id'] = 'nid';
  $handler->display->display_options['fields']['nid']['table'] = 'node';
  $handler->display->display_options['fields']['nid']['field'] = 'nid';
  $handler->display->display_options['fields']['nid']['label'] = 'nid';
  $handler->display->display_options['fields']['nid']['element_label_colon'] = FALSE;
  /* Field: Content: Updated date */
  $handler->display->display_options['fields']['changed']['id'] = 'changed';
  $handler->display->display_options['fields']['changed']['table'] = 'node';
  $handler->display->display_options['fields']['changed']['field'] = 'changed';
  $handler->display->display_options['fields']['changed']['label'] = 'updated_date';
  $handler->display->display_options['fields']['changed']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['changed']['date_format'] = 'custom';
  $handler->display->display_options['fields']['changed']['custom_date_format'] = 'U';
  $handler->display->display_options['fields']['changed']['second_date_format'] = 'long';
  /* Field: Content: WWEID */
  $handler->display->display_options['fields']['field_mdm_wweid_1']['id'] = 'field_mdm_wweid_1';
  $handler->display->display_options['fields']['field_mdm_wweid_1']['table'] = 'field_data_field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid_1']['field'] = 'field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid_1']['label'] = 'wweid';
  $handler->display->display_options['fields']['field_mdm_wweid_1']['element_label_colon'] = FALSE;
  /* Field: Content: Talent Type */
  $handler->display->display_options['fields']['field_superstar_type']['id'] = 'field_superstar_type';
  $handler->display->display_options['fields']['field_superstar_type']['table'] = 'field_data_field_superstar_type';
  $handler->display->display_options['fields']['field_superstar_type']['field'] = 'field_superstar_type';
  $handler->display->display_options['fields']['field_superstar_type']['label'] = 'talent_type';
  $handler->display->display_options['fields']['field_superstar_type']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_superstar_type']['type'] = 'taxonomy_term_reference_plain';
  $handler->display->display_options['fields']['field_superstar_type']['delta_offset'] = '0';
  /* Field: Content: Body */
  $handler->display->display_options['fields']['body']['id'] = 'body';
  $handler->display->display_options['fields']['body']['table'] = 'field_data_body';
  $handler->display->display_options['fields']['body']['field'] = 'body';
  $handler->display->display_options['fields']['body']['label'] = 'body';
  $handler->display->display_options['fields']['body']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['body']['type'] = 'text_plain';
  /* Field: Content: Height */
  $handler->display->display_options['fields']['field_talent_height']['id'] = 'field_talent_height';
  $handler->display->display_options['fields']['field_talent_height']['table'] = 'field_data_field_talent_height';
  $handler->display->display_options['fields']['field_talent_height']['field'] = 'field_talent_height';
  $handler->display->display_options['fields']['field_talent_height']['label'] = 'height';
  $handler->display->display_options['fields']['field_talent_height']['element_label_colon'] = FALSE;
  /* Field: Content: Weight */
  $handler->display->display_options['fields']['field_talent_weight']['id'] = 'field_talent_weight';
  $handler->display->display_options['fields']['field_talent_weight']['table'] = 'field_data_field_talent_weight';
  $handler->display->display_options['fields']['field_talent_weight']['field'] = 'field_talent_weight';
  $handler->display->display_options['fields']['field_talent_weight']['label'] = 'weight';
  $handler->display->display_options['fields']['field_talent_weight']['element_label_colon'] = FALSE;
  /* Field: Content: Career Highlights */
  $handler->display->display_options['fields']['field_talent_career_highlights']['id'] = 'field_talent_career_highlights';
  $handler->display->display_options['fields']['field_talent_career_highlights']['table'] = 'field_data_field_talent_career_highlights';
  $handler->display->display_options['fields']['field_talent_career_highlights']['field'] = 'field_talent_career_highlights';
  $handler->display->display_options['fields']['field_talent_career_highlights']['label'] = 'career_highlights';
  $handler->display->display_options['fields']['field_talent_career_highlights']['element_label_colon'] = FALSE;
  /* Field: Content: Hometown */
  $handler->display->display_options['fields']['field_talent_from']['id'] = 'field_talent_from';
  $handler->display->display_options['fields']['field_talent_from']['table'] = 'field_data_field_talent_from';
  $handler->display->display_options['fields']['field_talent_from']['field'] = 'field_talent_from';
  $handler->display->display_options['fields']['field_talent_from']['label'] = 'hometown';
  $handler->display->display_options['fields']['field_talent_from']['element_label_colon'] = FALSE;
  /* Field: Content: Signature Move */
  $handler->display->display_options['fields']['field_talent_signature_move']['id'] = 'field_talent_signature_move';
  $handler->display->display_options['fields']['field_talent_signature_move']['table'] = 'field_data_field_talent_signature_move';
  $handler->display->display_options['fields']['field_talent_signature_move']['field'] = 'field_talent_signature_move';
  $handler->display->display_options['fields']['field_talent_signature_move']['label'] = 'signature_move';
  $handler->display->display_options['fields']['field_talent_signature_move']['element_label_colon'] = FALSE;
  /* Field: Content: Action Image */
  $handler->display->display_options['fields']['field_secondary_image']['id'] = 'field_secondary_image';
  $handler->display->display_options['fields']['field_secondary_image']['table'] = 'field_data_field_secondary_image';
  $handler->display->display_options['fields']['field_secondary_image']['field'] = 'field_secondary_image';
  $handler->display->display_options['fields']['field_secondary_image']['label'] = 'secondary_image';
  $handler->display->display_options['fields']['field_secondary_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_secondary_image']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_secondary_image']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  /* Field: Content: Vertical Image */
  $handler->display->display_options['fields']['field_vertical_image']['id'] = 'field_vertical_image';
  $handler->display->display_options['fields']['field_vertical_image']['table'] = 'field_data_field_vertical_image';
  $handler->display->display_options['fields']['field_vertical_image']['field'] = 'field_vertical_image';
  $handler->display->display_options['fields']['field_vertical_image']['label'] = 'vertical_image';
  $handler->display->display_options['fields']['field_vertical_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_vertical_image']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_vertical_image']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  $handler->display->display_options['fields']['field_vertical_image']['delta_offset'] = '0';
  /* Field: Content: App Image */
  $handler->display->display_options['fields']['field_app_image']['id'] = 'field_app_image';
  $handler->display->display_options['fields']['field_app_image']['table'] = 'field_data_field_app_image';
  $handler->display->display_options['fields']['field_app_image']['field'] = 'field_app_image';
  $handler->display->display_options['fields']['field_app_image']['label'] = 'app_image';
  $handler->display->display_options['fields']['field_app_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_app_image']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_app_image']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  /* Field: Content: Profile Image */
  $handler->display->display_options['fields']['field_talent_profile_image']['id'] = 'field_talent_profile_image';
  $handler->display->display_options['fields']['field_talent_profile_image']['table'] = 'field_data_field_talent_profile_image';
  $handler->display->display_options['fields']['field_talent_profile_image']['field'] = 'field_talent_profile_image';
  $handler->display->display_options['fields']['field_talent_profile_image']['label'] = 'talent_profile_image';
  $handler->display->display_options['fields']['field_talent_profile_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_talent_profile_image']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_talent_profile_image']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  /* Field: Content: WWEID */
  $handler->display->display_options['fields']['field_mdm_wweid']['id'] = 'field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['table'] = 'field_data_field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['field'] = 'field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['label'] = 'lineage_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['type'] = 'text_plain';
  /* Field: Field: Primary Image */
  $handler->display->display_options['fields']['field_primary_image']['id'] = 'field_primary_image';
  $handler->display->display_options['fields']['field_primary_image']['table'] = 'field_data_field_primary_image';
  $handler->display->display_options['fields']['field_primary_image']['field'] = 'field_primary_image';
  $handler->display->display_options['fields']['field_primary_image']['label'] = 'primary_image';
  $handler->display->display_options['fields']['field_primary_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_primary_image']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_primary_image']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  /* Field: Field: Shows */
  $handler->display->display_options['fields']['field_show_reference']['id'] = 'field_show_reference';
  $handler->display->display_options['fields']['field_show_reference']['table'] = 'field_data_field_show_reference';
  $handler->display->display_options['fields']['field_show_reference']['field'] = 'field_show_reference';
  $handler->display->display_options['fields']['field_show_reference']['label'] = 'shows';
  $handler->display->display_options['fields']['field_show_reference']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_show_reference']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_show_reference']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  $handler->display->display_options['fields']['field_show_reference']['delta_offset'] = '0';
  $handler->display->display_options['path'] = 'superstars_en';
  $translatables['superstars'] = array(
    t('Master'),
    t('SuperStars English'),
    t('more'),
    t('Apply'),
    t('Reset'),
    t('Sort by'),
    t('Asc'),
    t('Desc'),
    t('Items per page'),
    t('- All -'),
    t('Offset'),
    t('« first'),
    t('‹ previous'),
    t('next ›'),
    t('last »'),
    t('SuperStars (English)'),
    t('English Feed of Superstars'),
    t('title'),
    t('nid'),
    t('updated_date'),
    t('wweid'),
    t('talent_type'),
    t('body'),
    t('height'),
    t('weight'),
    t('career_highlights'),
    t('hometown'),
    t('signature_move'),
    t('secondary_image'),
    t('vertical_image'),
    t('app_image'),
    t('talent_profile_image'),
    t('lineage_wweid'),
    t('primary_image'),
    t('shows'),
  );

  $view->save();
}

/**
 * Implements update_hook_N.
 *
 * Sets the image fields for the superstars feed that need further processing
 */
function wwe_master_update_7171() {
  variable_set('wwe_entity_api_superstars_settings_file_types', [
    'app_image' => 'app_image',
    'primary_image' => 'primary_image',
    'secondary_image' => 'secondary_image',
    'talent_profile_image' => 'talent_profile_image',
    'vertical_image' => 'vertical_image',
    'egacy_primary_image' => 0,
    'legacy_shield_image' => 0,
    'legacy_skin_image' => 0,
    'legacy_talent_head_shot' => 0,
    'legacy_talent_profile' => 0,
    'talent_stats_background' => 0,
    'thumbnail_image' => 0,
  ]);
}

/**
 * Implements update_hook_N().
 *
 * Adds the Championships feed view.
 */
function wwe_master_update_7172() {$view = new view();
  $view->name = 'championships';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'node';
  $view->human_name = 'Championships';
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Championships';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'none';
  $handler->display->display_options['pager']['options']['offset'] = '0';
  $handler->display->display_options['style_plugin'] = 'default';
  $handler->display->display_options['row_plugin'] = 'fields';
  /* Field: Content: Title */
  $handler->display->display_options['fields']['title']['id'] = 'title';
  $handler->display->display_options['fields']['title']['table'] = 'node';
  $handler->display->display_options['fields']['title']['field'] = 'title';
  $handler->display->display_options['fields']['title']['label'] = '';
  $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
  $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
  $handler->display->display_options['fields']['title']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['title']['link_to_node'] = FALSE;
  /* Field: Content: Nid */
  $handler->display->display_options['fields']['nid']['id'] = 'nid';
  $handler->display->display_options['fields']['nid']['table'] = 'node';
  $handler->display->display_options['fields']['nid']['field'] = 'nid';
  $handler->display->display_options['fields']['nid']['label'] = 'nid';
  $handler->display->display_options['fields']['nid']['element_label_colon'] = FALSE;
  /* Field: Content: WWEID */
  $handler->display->display_options['fields']['field_mdm_wweid']['id'] = 'field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['table'] = 'field_data_field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['field'] = 'field_mdm_wweid';
  $handler->display->display_options['fields']['field_mdm_wweid']['label'] = 'wweid';
  /* Field: Content: Updated date */
  $handler->display->display_options['fields']['changed']['id'] = 'changed';
  $handler->display->display_options['fields']['changed']['table'] = 'node';
  $handler->display->display_options['fields']['changed']['field'] = 'changed';
  $handler->display->display_options['fields']['changed']['label'] = 'updated_date';
  $handler->display->display_options['fields']['changed']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['changed']['date_format'] = 'custom';
  $handler->display->display_options['fields']['changed']['custom_date_format'] = 'U';
  $handler->display->display_options['fields']['changed']['second_date_format'] = 'long';
  /* Field: Content: Belt Image */
  $handler->display->display_options['fields']['field_belt_image']['id'] = 'field_belt_image';
  $handler->display->display_options['fields']['field_belt_image']['table'] = 'field_data_field_belt_image';
  $handler->display->display_options['fields']['field_belt_image']['field'] = 'field_belt_image';
  $handler->display->display_options['fields']['field_belt_image']['label'] = 'belt_image';
  $handler->display->display_options['fields']['field_belt_image']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['field_belt_image']['type'] = 'entityreference_entity_id';
  $handler->display->display_options['fields']['field_belt_image']['settings'] = array(
    'bypass_access' => 0,
    'link' => 0,
  );
  /* Sort criterion: Content: Updated date */
  $handler->display->display_options['sorts']['changed']['id'] = 'changed';
  $handler->display->display_options['sorts']['changed']['table'] = 'node';
  $handler->display->display_options['sorts']['changed']['field'] = 'changed';
  $handler->display->display_options['sorts']['changed']['order'] = 'DESC';
  /* Filter criterion: Content: Published */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'node';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['value'] = 1;
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
  /* Filter criterion: Content: Type */
  $handler->display->display_options['filters']['type']['id'] = 'type';
  $handler->display->display_options['filters']['type']['table'] = 'node';
  $handler->display->display_options['filters']['type']['field'] = 'type';
  $handler->display->display_options['filters']['type']['value'] = array(
    'championship' => 'championship',
  );

  /* Display: Championships */
  $handler = $view->new_display('services', 'Championships', 'championship');
  $handler->display->display_options['path'] = 'championships';
  $translatables['championships'] = array(
    t('Master'),
    t('Championships'),
    t('more'),
    t('Apply'),
    t('Reset'),
    t('Sort by'),
    t('Asc'),
    t('Desc'),
    t('nid'),
    t('wweid'),
    t('updated_date'),
    t('belt_image'),
  );

  $view->save();
}

/**
 * Implements update_hook_N().
 *
 * Enables the new services views for superstars_en and championships.
 */
function wwe_master_update_7173() {
  $drupal_api = services_endpoint_load('drupalapi');
  $drupal_api->resources['championships']['operations']['index']['enabled'] = '1';
  $drupal_api->resources['superstars_en']['operations']['index']['enabled'] = '1';
  services_endpoint_save($drupal_api);
}


/**
 * Implements update_hook_N.
 *
 * Create and add a new checkbox field and instance (field_node_exclude_search)
 * to several content types (Show, Championship, Article, Episode, Match, Gallery,
 * Talent, Video and Video Playlist) to be able to exclude specific content from the In-Site Search.
 */
function wwe_master_update_7174() {

  $field_machine_name = 'field_node_exclude_search';

  // Create field.
  if (!field_info_field($field_machine_name)) {
    $field = [
      'field_name' => $field_machine_name,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'translatable' => 1,
      'settings' => [
        'allowed_values' => [
          0 => 0,
          1 => 1,
        ],
      ],
    ];

    try {
      field_create_field($field);
    }
    catch (Exception $e) {
      error_log($e);
    }
  }

  // Create instances.
  $bundles = array(
    'article',
    'episode',
    'championship',
    'gallery',
    'match',
    'show',
    'talent',
    'video',
    'video_playlist',
  );

  foreach ($bundles as $bundle) {

    if (!field_info_instance('node', $field_machine_name, $bundle)) {
      $instance = [
        'bundle' => $bundle,
        'entity_type' => 'node',
        'field_name' => $field_machine_name,
        'label' => t('Exclude from in-site Search'),
        'description' => t('If <i>checked</i>, this node will not be sent to In-site Search.'),
        'required' => FALSE,
        'widget' => [
          'module'=> 'options',
          'type' => 'options_onoff',
          'weight' => 1,
          'settings' => [
            'display_label' => 1,
          ],
          'default_value' => [
            0 => [
              'value' => 0,
            ],
          ],
        ],
      ];

      try {
        field_create_instance($instance);
      }
      catch (Exception $e) {
        error_log($e);
      }
    }

    // We create the group to integrate that new field.
    $group_name = 'group_in_site_search';
    $view_mode = 'form';
    $label = 'In-Site Search';
    $groups = field_group_read_groups([
      'entity_type' => 'node',
      'bundle' => $bundle,
      'view_mode' => $view_mode,
    ]);

    $field_group = $groups['node'][$bundle][$view_mode][$group_name];
    // If the field group doesn't exist on the content type, create it.
    if (empty($field_group)) {
      $field_group = (object) [
        'identifier' => $group_name . '|' . 'node' . '|' . $bundle . '|' . $view_mode,
        'group_name' => $group_name,
        'entity_type' => 'node',
        'bundle' => $bundle,
        'mode' => $view_mode,
        'label' => $label,
        'weight' => '15',
        'children' => [],
        'format_type' => 'tab',
        'format_settings' => [
          'formatter' => 'closed',
          'instance_settings' => [
            'description' => '',
            'classes' => '',
            'required_fields' => 0,
          ],
        ],
      ];
    }

    $field_group->children[] = $field_machine_name;
    field_group_group_save($field_group);
    ctools_include('export');
    ctools_export_crud_enable('field_group', $field_group->identifier);
  }
}

/**
 * WEB-2178: Add variables for Chartbeat configuration.
 *  Set Chartbeat script to be injected on FBIA.
 */
function wwe_master_update_7175() {
  $charbeat_main_script= <<<EMBED_CODE
<script type='text/javascript'>
  (function() {
    var _sf_async_config = window._sf_async_config = (window._sf_async_config || {});
    _sf_async_config.uid = '%wwe_chartbeat_uid';
    _sf_async_config.domain = '%wwe_chartbeat_domain';
    _sf_async_config.title = '%wwe_chartbeat_content_title';
    _sf_async_config.sections = '%wwe_content_type';
    _sf_async_config.authors = '%wwe_content_author';
    _sf_async_config.useCanonical = true;
  })();
</script>
EMBED_CODE;

  $charbeat_load_main_script = <<<EMBED_CODE
<script async="async" src="//static.chartbeat.com/js/chartbeat.js"></script>
EMBED_CODE;

  $chartbeat_amp_script = <<<EMBED_CODE
<amp-analytics type="chartbeat">
  <script type="application/json">
    {
      "vars": {
        "uid": '%wwe_chartbeat_uid',
        "domain": '%wwe_chartbeat_domain',
        "sections": '%wwe_content_type',
        "authors": '%wwe_content_author',
        "title": '%wwe_chartbeat_content_title'
      }
    }
  </script>
</amp-analytics>
EMBED_CODE;

  $chartbeat_fbia_script = <<<EMBED_CODE
<script defer="defer" src="//static.chartbeat.com/js/chartbeat_fia.js"></script>
EMBED_CODE;

  variable_set('wwe_chartbeat_uid', '65739');
  variable_set('wwe_chartbeat_domain', 'wwe.com');
  variable_set('wwe_chartbeat_main_script', $charbeat_main_script);
  variable_set('wwe_chartbeat_load_main_script', $charbeat_load_main_script);
  variable_set('wwe_chartbeat_amp_script', $chartbeat_amp_script);
  variable_set('wwe_chartbeat_fbia_script', $chartbeat_fbia_script);
}
